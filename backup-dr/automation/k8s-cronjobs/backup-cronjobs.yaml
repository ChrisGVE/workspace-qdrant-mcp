# Kubernetes CronJobs for Qdrant MCP Backup Automation
apiVersion: v1
kind: Namespace
metadata:
  name: backup-system
  labels:
    name: backup-system
    app.kubernetes.io/name: backup-system
    app.kubernetes.io/component: backup
---
# ConfigMap for backup scripts
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-scripts
  namespace: backup-system
data:
  backup-env.sh: |
    #!/bin/bash
    # Environment configuration for backup jobs
    export BACKUP_BASE_DIR="/backups"
    export QDRANT_URL="http://qdrant.default.svc.cluster.local:6333"
    export LOG_FILE="/var/log/backup/k8s-backup.log"
    export PARALLEL_JOBS="4"
---
# PersistentVolumeClaim for backup storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-storage
  namespace: backup-system
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  storageClassName: fast-ssd  # Adjust based on your storage class
---
# ServiceAccount for backup jobs
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backup-service-account
  namespace: backup-system
---
# ClusterRole for backup operations
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: backup-operator
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets"]
  verbs: ["get", "list", "watch", "patch"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: backup-operator-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: backup-operator
subjects:
- kind: ServiceAccount
  name: backup-service-account
  namespace: backup-system
---
# Full Backup CronJob - Daily at 2:00 AM UTC
apiVersion: batch/v1
kind: CronJob
metadata:
  name: qdrant-full-backup
  namespace: backup-system
  labels:
    app: qdrant-backup
    type: full
spec:
  schedule: "0 2 * * *"  # Daily at 2:00 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 1
  startingDeadlineSeconds: 300
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 7200  # 2 hours timeout
      template:
        metadata:
          labels:
            app: qdrant-backup
            type: full
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup-full
            image: alpine:3.18
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args:
              - -c
              - |
                set -e
                apk add --no-cache curl jq bash tar gzip bc findutils coreutils git
                source /scripts/backup-env.sh
                mkdir -p /var/log/backup
                echo "[$(date)] Starting full backup job..." >> $LOG_FILE
                
                # Copy scripts to writable location
                cp -r /backup-scripts/* /tmp/
                chmod +x /tmp/backup/*.sh
                
                # Run full backup
                /tmp/backup/full-backup.sh --parallel-jobs $PARALLEL_JOBS
                
                echo "[$(date)] Full backup job completed" >> $LOG_FILE
            env:
            - name: BACKUP_BASE_DIR
              value: "/backups"
            - name: QDRANT_URL
              value: "http://qdrant.default.svc.cluster.local:6333"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-access-key-id
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-secrets
                  key: aws-secret-access-key
                  optional: true
            resources:
              limits:
                memory: "2Gi"
                cpu: "1000m"
              requests:
                memory: "512Mi"
                cpu: "250m"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            - name: backup-scripts-volume
              mountPath: /backup-scripts
              readOnly: true
            - name: scripts-config
              mountPath: /scripts
              readOnly: true
            - name: metrics-volume
              mountPath: /var/lib/node_exporter/textfile_collector
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
          - name: backup-scripts-volume
            configMap:
              name: backup-scripts-files
              defaultMode: 0755
          - name: scripts-config
            configMap:
              name: backup-scripts
              defaultMode: 0755
          - name: metrics-volume
            hostPath:
              path: /var/lib/node_exporter/textfile_collector
              type: DirectoryOrCreate
---
# Incremental Backup CronJob - Every 4 hours
apiVersion: batch/v1
kind: CronJob
metadata:
  name: qdrant-incremental-backup
  namespace: backup-system
  labels:
    app: qdrant-backup
    type: incremental
spec:
  schedule: "0 */4 * * *"  # Every 4 hours
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 5
  successfulJobsHistoryLimit: 3
  startingDeadlineSeconds: 180
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 3600  # 1 hour timeout
      template:
        metadata:
          labels:
            app: qdrant-backup
            type: incremental
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup-incremental
            image: alpine:3.18
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args:
              - -c
              - |
                set -e
                apk add --no-cache curl jq bash tar gzip bc findutils coreutils
                source /scripts/backup-env.sh
                mkdir -p /var/log/backup
                echo "[$(date)] Starting incremental backup job..." >> $LOG_FILE
                
                # Copy scripts to writable location
                cp -r /backup-scripts/* /tmp/
                chmod +x /tmp/backup/*.sh
                
                # Run incremental backup
                /tmp/backup/qdrant-backup.sh --type incremental --parallel-jobs $PARALLEL_JOBS
                
                echo "[$(date)] Incremental backup job completed" >> $LOG_FILE
            env:
            - name: BACKUP_BASE_DIR
              value: "/backups"
            - name: QDRANT_URL
              value: "http://qdrant.default.svc.cluster.local:6333"
            resources:
              limits:
                memory: "1Gi"
                cpu: "500m"
              requests:
                memory: "256Mi"
                cpu: "100m"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            - name: backup-scripts-volume
              mountPath: /backup-scripts
              readOnly: true
            - name: scripts-config
              mountPath: /scripts
              readOnly: true
            - name: metrics-volume
              mountPath: /var/lib/node_exporter/textfile_collector
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
          - name: backup-scripts-volume
            configMap:
              name: backup-scripts-files
              defaultMode: 0755
          - name: scripts-config
            configMap:
              name: backup-scripts
              defaultMode: 0755
          - name: metrics-volume
            hostPath:
              path: /var/lib/node_exporter/textfile_collector
              type: DirectoryOrCreate
---
# Backup Verification CronJob - Daily at 4:00 AM UTC
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-verification
  namespace: backup-system
  labels:
    app: backup-verification
spec:
  schedule: "0 4 * * *"  # Daily at 4:00 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 2
  startingDeadlineSeconds: 300
  jobTemplate:
    spec:
      backoffLimit: 1
      activeDeadlineSeconds: 3600  # 1 hour timeout
      template:
        metadata:
          labels:
            app: backup-verification
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup-verification
            image: alpine:3.18
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args:
              - -c
              - |
                set -e
                apk add --no-cache curl jq bash tar gzip bc file findutils coreutils
                mkdir -p /var/log/verification
                echo "[$(date)] Starting backup verification job..." >> /var/log/verification/k8s-verification.log
                
                # Copy scripts to writable location
                cp -r /backup-scripts/* /tmp/
                chmod +x /tmp/verification/*.sh
                
                # Run backup verification
                /tmp/verification/verify-backup.sh --type full
                
                echo "[$(date)] Backup verification job completed" >> /var/log/verification/k8s-verification.log
            resources:
              limits:
                memory: "512Mi"
                cpu: "250m"
              requests:
                memory: "128Mi"
                cpu: "50m"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
              readOnly: true
            - name: backup-scripts-volume
              mountPath: /backup-scripts
              readOnly: true
            - name: metrics-volume
              mountPath: /var/lib/node_exporter/textfile_collector
            - name: temp-volume
              mountPath: /tmp
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
          - name: backup-scripts-volume
            configMap:
              name: backup-scripts-files
              defaultMode: 0755
          - name: metrics-volume
            hostPath:
              path: /var/lib/node_exporter/textfile_collector
              type: DirectoryOrCreate
          - name: temp-volume
            emptyDir:
              sizeLimit: 10Gi
---
# Backup Cleanup CronJob - Weekly on Sunday at 3:00 AM UTC
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-cleanup
  namespace: backup-system
  labels:
    app: backup-cleanup
spec:
  schedule: "0 3 * * 0"  # Weekly on Sunday at 3:00 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 2
  successfulJobsHistoryLimit: 1
  startingDeadlineSeconds: 300
  jobTemplate:
    spec:
      backoffLimit: 1
      activeDeadlineSeconds: 1800  # 30 minutes timeout
      template:
        metadata:
          labels:
            app: backup-cleanup
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup-cleanup
            image: alpine:3.18
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args:
              - -c
              - |
                set -e
                echo "[$(date)] Starting backup cleanup job..."
                
                # Clean up old full backups (keep 30 days)
                find /backups/full -type d -mtime +30 -exec rm -rf {} + 2>/dev/null || true
                echo "Cleaned up full backups older than 30 days"
                
                # Clean up old incremental backups (keep 7 days)
                find /backups/qdrant/incremental -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
                echo "Cleaned up incremental backups older than 7 days"
                
                # Clean up temporary files
                find /tmp -name "*qdrant*" -mtime +1 -delete 2>/dev/null || true
                
                echo "[$(date)] Backup cleanup job completed"
            env:
            - name: RETENTION_DAYS
              value: "30"
            resources:
              limits:
                memory: "128Mi"
                cpu: "100m"
              requests:
                memory: "64Mi"
                cpu: "25m"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
---
# Backup Monitoring Job - Runs every 5 minutes
apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup-monitoring
  namespace: backup-system
  labels:
    app: backup-monitoring
spec:
  schedule: "*/5 * * * *"  # Every 5 minutes
  timeZone: "UTC"
  concurrencyPolicy: Replace
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  startingDeadlineSeconds: 60
  jobTemplate:
    spec:
      backoffLimit: 1
      activeDeadlineSeconds: 180  # 3 minutes timeout
      template:
        metadata:
          labels:
            app: backup-monitoring
        spec:
          serviceAccountName: backup-service-account
          restartPolicy: OnFailure
          containers:
          - name: backup-monitor
            image: alpine:3.18
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh"]
            args:
              - -c
              - |
                set -e
                apk add --no-cache jq bc findutils coreutils
                
                METRICS_FILE=/var/lib/node_exporter/textfile_collector/k8s_backup_status_metrics.prom
                
                {
                  echo '# HELP k8s_backup_last_success_timestamp Unix timestamp of last successful backup'
                  echo '# TYPE k8s_backup_last_success_timestamp gauge'
                  
                  # Full backup timestamp
                  LATEST_FULL=$(find /backups/full -name manifest.json -exec stat -c %Y {} + 2>/dev/null | sort -n | tail -1)
                  echo "k8s_backup_last_success_timestamp{type=\"full\",namespace=\"backup-system\"} ${LATEST_FULL:-0}"
                  
                  # Incremental backup timestamp
                  LATEST_INCREMENTAL=$(find /backups/qdrant/incremental -name manifest.json -exec stat -c %Y {} + 2>/dev/null | sort -n | tail -1)
                  echo "k8s_backup_last_success_timestamp{type=\"incremental\",namespace=\"backup-system\"} ${LATEST_INCREMENTAL:-0}"
                  
                  echo '# HELP k8s_backup_size_bytes Total size of all backups'
                  echo '# TYPE k8s_backup_size_bytes gauge'
                  
                  FULL_SIZE=$(du -sb /backups/full 2>/dev/null | cut -f1 || echo 0)
                  INCREMENTAL_SIZE=$(du -sb /backups/qdrant/incremental 2>/dev/null | cut -f1 || echo 0)
                  
                  echo "k8s_backup_size_bytes{type=\"full\",namespace=\"backup-system\"} $FULL_SIZE"
                  echo "k8s_backup_size_bytes{type=\"incremental\",namespace=\"backup-system\"} $INCREMENTAL_SIZE"
                  
                  echo '# HELP k8s_backup_age_seconds Age of the newest backup in seconds'
                  echo '# TYPE k8s_backup_age_seconds gauge'
                  
                  CURRENT_TIME=$(date +%s)
                  FULL_AGE=$((CURRENT_TIME - ${LATEST_FULL:-0}))
                  INCREMENTAL_AGE=$((CURRENT_TIME - ${LATEST_INCREMENTAL:-0}))
                  
                  echo "k8s_backup_age_seconds{type=\"full\",namespace=\"backup-system\"} $FULL_AGE"
                  echo "k8s_backup_age_seconds{type=\"incremental\",namespace=\"backup-system\"} $INCREMENTAL_AGE"
                  
                } > $METRICS_FILE
            resources:
              limits:
                memory: "64Mi"
                cpu: "50m"
              requests:
                memory: "32Mi"
                cpu: "10m"
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
              readOnly: true
            - name: metrics-volume
              mountPath: /var/lib/node_exporter/textfile_collector
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
          - name: metrics-volume
            hostPath:
              path: /var/lib/node_exporter/textfile_collector
              type: DirectoryOrCreate
---
# Secret for backup credentials (create manually)
apiVersion: v1
kind: Secret
metadata:
  name: backup-secrets
  namespace: backup-system
type: Opaque
data:
  # Base64 encoded AWS credentials (optional)
  # aws-access-key-id: <base64-encoded-access-key>
  # aws-secret-access-key: <base64-encoded-secret-key>
  # Example:
  # echo -n "your-access-key" | base64
  aws-access-key-id: ""
  aws-secret-access-key: ""
---
# NetworkPolicy to secure backup operations
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-network-policy
  namespace: backup-system
spec:
  podSelector:
    matchLabels:
      app: qdrant-backup
  policyTypes:
  - Ingress
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: default
    ports:
    - protocol: TCP
      port: 6333  # Qdrant port
  - to: []  # Allow all egress for backup uploads
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - to: []  # Allow DNS
    ports:
    - protocol: UDP
      port: 53
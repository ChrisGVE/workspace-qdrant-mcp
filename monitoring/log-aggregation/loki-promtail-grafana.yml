# Grafana Loki Log Aggregation Stack for Workspace Qdrant MCP
version: '3.8'

services:
  loki:
    image: grafana/loki:2.9.2
    container_name: workspace-qdrant-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  promtail:
    image: grafana/promtail:2.9.2
    container_name: workspace-qdrant-promtail
    volumes:
      - ./promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - promtail_data:/tmp/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki

  grafana-logs:
    image: grafana/grafana:10.2.0
    container_name: workspace-qdrant-grafana-logs
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_logs_data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - loki

volumes:
  loki_data:
    driver: local
  promtail_data:
    driver: local
  grafana_logs_data:
    driver: local

networks:
  monitoring:
    driver: bridge

---
# File: ./loki/local-config.yaml
auth_enabled: false

server:
  http_listen_port: 3100
  grpc_listen_port: 9096

common:
  instance_addr: 127.0.0.1
  path_prefix: /loki
  storage:
    filesystem:
      chunks_directory: /loki/chunks
      rules_directory: /loki/rules
  replication_factor: 1
  ring:
    kvstore:
      store: inmemory

query_range:
  results_cache:
    cache:
      embedded_cache:
        enabled: true
        max_size_mb: 100

schema_config:
  configs:
    - from: 2020-10-24
      store: boltdb-shipper
      object_store: filesystem
      schema: v11
      index:
        prefix: index_
        period: 24h

ruler:
  alertmanager_url: http://localhost:9093

# Limits configuration
limits_config:
  enforce_metric_name: false
  reject_old_samples: true
  reject_old_samples_max_age: 168h
  ingestion_rate_mb: 10
  ingestion_burst_size_mb: 20
  max_concurrent_tail_requests: 20
  max_query_parallelism: 32

# Retention configuration
table_manager:
  retention_deletes_enabled: true
  retention_period: 336h  # 14 days

---
# File: ./promtail/config.yml
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/promtail/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Application logs
  - job_name: workspace-qdrant-mcp
    static_configs:
      - targets:
          - localhost
        labels:
          job: workspace-qdrant-mcp
          service: workspace-qdrant-mcp
          __path__: /var/log/workspace-qdrant-mcp/*.log
    pipeline_stages:
      # Parse JSON logs
      - json:
          expressions:
            timestamp: timestamp
            level: level
            logger: logger
            message: message
            module: module
      
      # Set timestamp
      - timestamp:
          source: timestamp
          format: RFC3339Nano
          fallback_formats:
            - '2006-01-02T15:04:05Z07:00'
            - '2006-01-02 15:04:05'
      
      # Extract log level
      - regex:
          expression: '(?P<level>DEBUG|INFO|WARNING|ERROR|CRITICAL)'
      
      # Label extraction
      - labels:
          level:
          logger:
          module:
      
      # Parse vector search logs
      - match:
          selector: '{logger=~".*vector_search.*"}'
          stages:
            - regex:
                expression: 'query_time=(?P<query_time_ms>\\d+\\.?\\d*)ms.*results=(?P<result_count>\\d+)'
            - labels:
                query_time_ms:
                result_count:
      
      # Parse ingestion logs
      - match:
          selector: '{logger=~".*ingestion.*"}'
          stages:
            - regex:
                expression: 'doc_id=(?P<document_id>[^\\s]+).*size=(?P<doc_size_bytes>\\d+).*processing_time=(?P<processing_time_ms>\\d+\\.?\\d*)ms'
            - labels:
                document_id:
                doc_size_bytes:
                processing_time_ms:
      
      # Error categorization
      - match:
          selector: '{level=~"ERROR|CRITICAL"}'
          stages:
            - regex:
                expression: '(ConnectionError|TimeoutError|ConnectTimeout)'
                source: message
            - replace:
                expression: '.*'
                replace: 'connection'
                dest: error_category
            - labels:
                error_category:

  # System logs
  - job_name: syslog
    static_configs:
      - targets:
          - localhost
        labels:
          job: syslog
          service: system
          __path__: /var/log/syslog
    pipeline_stages:
      - regex:
          expression: '^(?P<timestamp>\\w+\\s+\\d+\\s+\\d+:\\d+:\\d+)\\s+(?P<hostname>\\w+)\\s+(?P<service>\\w+)\\[?(?P<pid>\\d+)?\\]?:\\s+(?P<message>.*)$'
      - labels:
          hostname:
          service:
          pid:

  # Docker container logs
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["logging=promtail"]
    relabel_configs:
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container_name'
      - source_labels: ['__meta_docker_container_log_stream']
        target_label: 'log_stream'
    pipeline_stages:
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - output:
          source: output

  # Nginx access logs
  - job_name: nginx
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          service: nginx
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      - regex:
          expression: '^(?P<remote_addr>[\\d\\.]+) - (?P<remote_user>\\S+) \\[(?P<time_local>[^\\]]+)\\] "(?P<method>\\S+) (?P<path>\\S+) (?P<protocol>\\S+)" (?P<status>\\d+) (?P<body_bytes_sent>\\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
      - labels:
          method:
          status:
          remote_addr:

---
# File: ./grafana-provisioning/datasources/loki.yml
apiVersion: 1

datasources:
  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
    isDefault: true
    editable: true

---
# File: ./grafana-provisioning/dashboards/logs-dashboard.json
{
  "dashboard": {
    "id": null,
    "title": "Workspace Qdrant MCP - Logs Dashboard",
    "tags": ["workspace-qdrant-mcp", "logs"],
    "style": "dark",
    "timezone": "browser",
    "refresh": "30s",
    "time": {
      "from": "now-1h",
      "to": "now"
    },
    "panels": [
      {
        "id": 1,
        "title": "Log Volume by Level",
        "type": "graph",
        "targets": [
          {
            "expr": "sum by (level) (rate({service=\"workspace-qdrant-mcp\"}[5m]))",
            "legendFormat": "{{level}}"
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 24,
          "x": 0,
          "y": 0
        }
      },
      {
        "id": 2,
        "title": "Error Logs",
        "type": "logs",
        "targets": [
          {
            "expr": "{service=\"workspace-qdrant-mcp\", level=~\"ERROR|CRITICAL\"}"
          }
        ],
        "gridPos": {
          "h": 12,
          "w": 24,
          "x": 0,
          "y": 8
        }
      },
      {
        "id": 3,
        "title": "Vector Search Performance",
        "type": "graph",
        "targets": [
          {
            "expr": "histogram_quantile(0.95, sum by (le) (rate({logger=~\".*vector_search.*\"} | json | unwrap query_time_ms [5m])))",
            "legendFormat": "95th percentile"
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 20
        }
      },
      {
        "id": 4,
        "title": "Document Ingestion Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate({logger=~\".*ingestion.*\"}[5m])",
            "legendFormat": "Ingestion Rate"
          }
        ],
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 20
        }
      }
    ]
  }
}
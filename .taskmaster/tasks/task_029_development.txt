# Task ID: 29
# Title: Implement persistent folder watching via MCP
# Status: pending
# Dependencies: None
# Priority: high
# Description: Add MCP tools for declaring and managing persistent watched folders with configuration persistence
# Details:
Add new MCP tools: add_watch_folder, remove_watch_folder, list_watched_folders, configure_watch_settings. Implement persistence mechanism using JSON config file in user's config directory or project .workspace-qdrant/ folder. Integrate with existing file watcher in src/workspace_qdrant_mcp/core/file_watcher.py. Add watch configuration management: recursive depth, file filters, update frequency, collection targeting. Ensure watch state survives server restarts. Handle watch folder validation and error recovery.

# Test Strategy:
Test folder watch persistence across server restarts. Verify watch configuration changes take effect immediately. Test error handling for invalid paths and permissions issues.

# Subtasks:
## 1. Create persistent watch configuration storage system [pending]
### Dependencies: None
### Description: Implement JSON config file management for storing watch settings in user config directory with proper schema validation and atomic file operations
### Details:
Create config schema for watch folder settings including path, recursive depth, filters, update frequency, and collection targeting. Implement config file management functions with validation, atomic writes, and backup recovery. Store in ~/.workspace-qdrant/watch-config.json or similar location.

## 2. Implement core MCP tools for watch management [pending]
### Dependencies: None
### Description: Create MCP tools: add_watch_folder, remove_watch_folder, list_watched_folders, configure_watch_settings with proper parameter validation and error handling
### Details:
Add new MCP tool functions to server.py with JSON schema validation for parameters. Include path validation, configuration options validation, and proper error responses. Each tool should interact with the persistent configuration system from subtask 29.1.

## 3. Extend file watcher with persistent state management [pending]
### Dependencies: None
### Description: Modify existing file_watcher.py to load/save watch configurations and implement watch state recovery on server startup
### Details:
Integrate the persistent configuration system with the existing FileWatcher class. Add methods to load watch configurations on startup, save state changes, and recover from interrupted watch operations. Ensure backward compatibility with existing file watching functionality.

## 4. Add advanced watch configuration options [pending]
### Dependencies: None
### Description: Implement recursive depth control, file pattern filters, update frequency settings, and collection targeting configuration with validation
### Details:
Add configuration options for: recursive depth (integer 0-10), file filters using glob patterns, update frequency in seconds, target collection selection. Include validation functions for each configuration type and default value handling. Update the configuration schema from 29.1 to support these options.

## 5. Implement watch folder validation and error recovery [pending]
### Dependencies: None
### Description: Add path validation, permission checks, graceful handling of missing/invalid folders, and automatic retry mechanisms
### Details:
Create validation functions for: path existence and accessibility, permission checks for read access, handling of symlinks and network paths. Implement error recovery mechanisms for temporary network issues, permission changes, and folder deletion/recreation. Add logging for validation failures and recovery attempts.

## 6. Add watch state synchronization and persistence [pending]
### Dependencies: None
### Description: Ensure configuration changes take effect immediately, handle concurrent access to config file, and implement proper locking mechanisms
### Details:
Implement real-time synchronization between configuration changes and active watchers. Add file locking mechanisms to prevent corruption during concurrent config updates. Create event system to notify active watchers of configuration changes. Handle race conditions and ensure atomic operations for config updates.

## 7. Create comprehensive testing for persistent watching [pending]
### Dependencies: None
### Description: Test persistence across server restarts, configuration validation, error recovery scenarios, and concurrent access handling
### Details:
Create test suite covering: server restart persistence, config file corruption recovery, invalid path handling, permission change scenarios, concurrent MCP tool usage, file filter validation, recursive depth limits, and update frequency changes. Include integration tests with existing file watcher functionality.


{
  "test_results": {
    "configuration": {
      "default_config": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.812,
        "memory_change": 25702400,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "env_config": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.576,
        "memory_change": 37982208,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "yaml_config": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.738,
        "memory_change": 4894720,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "cli_debug": {
        "returncode": 0,
        "stdout": "{\"timestamp\":\"2025-09-09T12:42:56.094237+00:00\",\"level\":\"DEBUG\",\"logger\":\"workspace_qdrant_mcp.cli.main\",\"message\":\"Debug mode enabled\",\"module\":\"logger\",\"function\":\"_log_with_extra\",\"line\":120,\"thread_id\":140704423341952,\"thread_name\":\"MainThread\",\"process_id\":60935}\nUsage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.625,
        "memory_change": 30420992,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      }
    },
    "memory": {
      "help_memory": {
        "returncode": 0,
        "stdout": "Usage: wqm [OPTIONS] COMMAND [ARGS]...\n\n  Workspace Qdrant MCP - Unified semantic workspace management\n\nOptions:\n  -v, --version      Show version information\n  --verbose          Show verbose version information\n  -c, --config TEXT  Custom configuration file\n  --debug            Enable debug mode with verbose logging\n  --help             Show this message and exit.\n\nCommands:\n  init           Initialize shell completion for wqm\n  memory         Memory rules and LLM behavior management\n  admin          System administration and configuration\n  ingest         Manual document processing\n  search         Command-line search interface\n  library        Library collection management\n  service        System service management for memexd daemon\n  watch          Folder watching configuration\n  web            Integrated web UI server with workspace features\n  observability  Observability, monitoring, and health checks\n  status         Processing status and user feedback system\n",
        "stderr": "",
        "execution_time": 2.63,
        "memory_change": 6103040,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "version_memory": {
        "returncode": 0,
        "stdout": "0.2.0\n",
        "stderr": "",
        "execution_time": 2.267,
        "memory_change": 23515136,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "admin_status_memory": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.762,
        "memory_change": -50737152,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "startup_memory": {
        "returncode": 0,
        "stdout": "",
        "stderr": "",
        "execution_time": 2.027,
        "memory_change": 26378240,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      }
    },
    "cross_platform": {
      "path_handling": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.675,
        "memory_change": -7753728,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "env_detection": {
        "returncode": 0,
        "stdout": "Workspace Qdrant MCP 0.2.0\nPython 3.13.7\nPlatform: darwin\nInstallation path: /Users/chris/.local/pipx/venvs/workspace-qdrant-mcp/lib/python3.13/site-packages/workspace_qdrant_mcp\n",
        "stderr": "",
        "execution_time": 2.706,
        "memory_change": 44879872,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "unicode_handling": {
        "returncode": 0,
        "stdout": "Usage: wqm search [OPTIONS] COMMAND [ARGS]...\n\n  Command-line search interface\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  project     Search current project collections.\n  collection  Search specific collection.\n  global      Search global collections (library and system).\n  all         Search all collections.\n  memory      Search memory rules and knowledge graph.\n  research    Advanced research mode with analysis.\n",
        "stderr": "",
        "execution_time": 2.693,
        "memory_change": -37470208,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      }
    },
    "mcp": {
      "server_help": {
        "returncode": 0,
        "stdout": "                                                                                \n Usage: workspace-qdrant-mcp [OPTIONS]                                          \n                                                                                \n Start the workspace-qdrant-mcp MCP server.                                     \n                                                                                \n Initializes the workspace environment and starts the FastMCP server using the  \n specified transport protocol. For MCP clients like Claude Desktop/Code, use    \n 'stdio' transport (default). HTTP transports are available for web-based       \n clients.                                                                       \n Args:     transport: Transport protocol - 'stdio' for MCP clients,             \n 'http'/'sse'/'streamable-http' for web     host: IP address to bind the server \n to (only used for HTTP transports)     port: TCP port number for the server    \n (only used for HTTP transports)     config: Optional path to YAML              \n configuration file (takes precedence over environment variables)               \n Environment Variables:     WORKSPACE_QDRANT_*: Prefixed environment variables  \n for configuration     QDRANT_URL: Qdrant database endpoint URL (legacy, use    \n YAML config preferred)     OPENAI_API_KEY: Required for embedding generation   \n (if using OpenAI models)                                                       \n Example:     ```bash     # Start MCP server for Claude Desktop (default)       \n python -m workspace_qdrant_mcp.server                                          \n # Start with custom YAML configuration     python -m                           \n workspace_qdrant_mcp.server --config ./config.yaml                             \n # Start HTTP server for web clients     python -m workspace_qdrant_mcp.server  \n --transport http --host 0.0.0.0 --port 9000     ```                            \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --transport        TEXT     Transport protocol (stdio, http, sse,            \u2502\n\u2502                             streamable-http)                                 \u2502\n\u2502                             [default: stdio]                                 \u2502\n\u2502 --host             TEXT     Host to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 127.0.0.1]                             \u2502\n\u2502 --port             INTEGER  Port to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 8000]                                  \u2502\n\u2502 --config           TEXT     Path to YAML configuration file                  \u2502\n\u2502 --help                      Show this message and exit.                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n",
        "stderr": "",
        "execution_time": 2.285,
        "memory_change": 51879936,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "stdio_transport": {
        "returncode": 0,
        "stdout": "                                                                                \n Usage: workspace-qdrant-mcp [OPTIONS]                                          \n                                                                                \n Start the workspace-qdrant-mcp MCP server.                                     \n                                                                                \n Initializes the workspace environment and starts the FastMCP server using the  \n specified transport protocol. For MCP clients like Claude Desktop/Code, use    \n 'stdio' transport (default). HTTP transports are available for web-based       \n clients.                                                                       \n Args:     transport: Transport protocol - 'stdio' for MCP clients,             \n 'http'/'sse'/'streamable-http' for web     host: IP address to bind the server \n to (only used for HTTP transports)     port: TCP port number for the server    \n (only used for HTTP transports)     config: Optional path to YAML              \n configuration file (takes precedence over environment variables)               \n Environment Variables:     WORKSPACE_QDRANT_*: Prefixed environment variables  \n for configuration     QDRANT_URL: Qdrant database endpoint URL (legacy, use    \n YAML config preferred)     OPENAI_API_KEY: Required for embedding generation   \n (if using OpenAI models)                                                       \n Example:     ```bash     # Start MCP server for Claude Desktop (default)       \n python -m workspace_qdrant_mcp.server                                          \n # Start with custom YAML configuration     python -m                           \n workspace_qdrant_mcp.server --config ./config.yaml                             \n # Start HTTP server for web clients     python -m workspace_qdrant_mcp.server  \n --transport http --host 0.0.0.0 --port 9000     ```                            \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --transport        TEXT     Transport protocol (stdio, http, sse,            \u2502\n\u2502                             streamable-http)                                 \u2502\n\u2502                             [default: stdio]                                 \u2502\n\u2502 --host             TEXT     Host to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 127.0.0.1]                             \u2502\n\u2502 --port             INTEGER  Port to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 8000]                                  \u2502\n\u2502 --config           TEXT     Path to YAML configuration file                  \u2502\n\u2502 --help                      Show this message and exit.                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n",
        "stderr": "",
        "execution_time": 2.432,
        "memory_change": 153092096,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "http_transport": {
        "returncode": 0,
        "stdout": "                                                                                \n Usage: workspace-qdrant-mcp [OPTIONS]                                          \n                                                                                \n Start the workspace-qdrant-mcp MCP server.                                     \n                                                                                \n Initializes the workspace environment and starts the FastMCP server using the  \n specified transport protocol. For MCP clients like Claude Desktop/Code, use    \n 'stdio' transport (default). HTTP transports are available for web-based       \n clients.                                                                       \n Args:     transport: Transport protocol - 'stdio' for MCP clients,             \n 'http'/'sse'/'streamable-http' for web     host: IP address to bind the server \n to (only used for HTTP transports)     port: TCP port number for the server    \n (only used for HTTP transports)     config: Optional path to YAML              \n configuration file (takes precedence over environment variables)               \n Environment Variables:     WORKSPACE_QDRANT_*: Prefixed environment variables  \n for configuration     QDRANT_URL: Qdrant database endpoint URL (legacy, use    \n YAML config preferred)     OPENAI_API_KEY: Required for embedding generation   \n (if using OpenAI models)                                                       \n Example:     ```bash     # Start MCP server for Claude Desktop (default)       \n python -m workspace_qdrant_mcp.server                                          \n # Start with custom YAML configuration     python -m                           \n workspace_qdrant_mcp.server --config ./config.yaml                             \n # Start HTTP server for web clients     python -m workspace_qdrant_mcp.server  \n --transport http --host 0.0.0.0 --port 9000     ```                            \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --transport        TEXT     Transport protocol (stdio, http, sse,            \u2502\n\u2502                             streamable-http)                                 \u2502\n\u2502                             [default: stdio]                                 \u2502\n\u2502 --host             TEXT     Host to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 127.0.0.1]                             \u2502\n\u2502 --port             INTEGER  Port to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 8000]                                  \u2502\n\u2502 --config           TEXT     Path to YAML configuration file                  \u2502\n\u2502 --help                      Show this message and exit.                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n",
        "stderr": "",
        "execution_time": 2.324,
        "memory_change": 165978112,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "port_config": {
        "returncode": 0,
        "stdout": "                                                                                \n Usage: workspace-qdrant-mcp [OPTIONS]                                          \n                                                                                \n Start the workspace-qdrant-mcp MCP server.                                     \n                                                                                \n Initializes the workspace environment and starts the FastMCP server using the  \n specified transport protocol. For MCP clients like Claude Desktop/Code, use    \n 'stdio' transport (default). HTTP transports are available for web-based       \n clients.                                                                       \n Args:     transport: Transport protocol - 'stdio' for MCP clients,             \n 'http'/'sse'/'streamable-http' for web     host: IP address to bind the server \n to (only used for HTTP transports)     port: TCP port number for the server    \n (only used for HTTP transports)     config: Optional path to YAML              \n configuration file (takes precedence over environment variables)               \n Environment Variables:     WORKSPACE_QDRANT_*: Prefixed environment variables  \n for configuration     QDRANT_URL: Qdrant database endpoint URL (legacy, use    \n YAML config preferred)     OPENAI_API_KEY: Required for embedding generation   \n (if using OpenAI models)                                                       \n Example:     ```bash     # Start MCP server for Claude Desktop (default)       \n python -m workspace_qdrant_mcp.server                                          \n # Start with custom YAML configuration     python -m                           \n workspace_qdrant_mcp.server --config ./config.yaml                             \n # Start HTTP server for web clients     python -m workspace_qdrant_mcp.server  \n --transport http --host 0.0.0.0 --port 9000     ```                            \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --transport        TEXT     Transport protocol (stdio, http, sse,            \u2502\n\u2502                             streamable-http)                                 \u2502\n\u2502                             [default: stdio]                                 \u2502\n\u2502 --host             TEXT     Host to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 127.0.0.1]                             \u2502\n\u2502 --port             INTEGER  Port to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 8000]                                  \u2502\n\u2502 --config           TEXT     Path to YAML configuration file                  \u2502\n\u2502 --help                      Show this message and exit.                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n",
        "stderr": "",
        "execution_time": 2.359,
        "memory_change": 314048512,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      },
      "host_config": {
        "returncode": 0,
        "stdout": "                                                                                \n Usage: workspace-qdrant-mcp [OPTIONS]                                          \n                                                                                \n Start the workspace-qdrant-mcp MCP server.                                     \n                                                                                \n Initializes the workspace environment and starts the FastMCP server using the  \n specified transport protocol. For MCP clients like Claude Desktop/Code, use    \n 'stdio' transport (default). HTTP transports are available for web-based       \n clients.                                                                       \n Args:     transport: Transport protocol - 'stdio' for MCP clients,             \n 'http'/'sse'/'streamable-http' for web     host: IP address to bind the server \n to (only used for HTTP transports)     port: TCP port number for the server    \n (only used for HTTP transports)     config: Optional path to YAML              \n configuration file (takes precedence over environment variables)               \n Environment Variables:     WORKSPACE_QDRANT_*: Prefixed environment variables  \n for configuration     QDRANT_URL: Qdrant database endpoint URL (legacy, use    \n YAML config preferred)     OPENAI_API_KEY: Required for embedding generation   \n (if using OpenAI models)                                                       \n Example:     ```bash     # Start MCP server for Claude Desktop (default)       \n python -m workspace_qdrant_mcp.server                                          \n # Start with custom YAML configuration     python -m                           \n workspace_qdrant_mcp.server --config ./config.yaml                             \n # Start HTTP server for web clients     python -m workspace_qdrant_mcp.server  \n --transport http --host 0.0.0.0 --port 9000     ```                            \n                                                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --transport        TEXT     Transport protocol (stdio, http, sse,            \u2502\n\u2502                             streamable-http)                                 \u2502\n\u2502                             [default: stdio]                                 \u2502\n\u2502 --host             TEXT     Host to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 127.0.0.1]                             \u2502\n\u2502 --port             INTEGER  Port to bind to (for HTTP transports only)       \u2502\n\u2502                             [default: 8000]                                  \u2502\n\u2502 --config           TEXT     Path to YAML configuration file                  \u2502\n\u2502 --help                      Show this message and exit.                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n",
        "stderr": "",
        "execution_time": 2.268,
        "memory_change": 98299904,
        "cwd_before": "/Users/chris/Dropbox/dev/ai/claude-code-cfg/mcp/workspace-qdrant-mcp",
        "success": true
      }
    },
    "project_detection": {
      "detection_tmp": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.695,
        "memory_change": 43421696,
        "cwd_before": "/tmp",
        "success": true
      },
      "detection_Users_chris": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.739,
        "memory_change": -210231296,
        "cwd_before": "/Users/chris",
        "success": true
      },
      "detection_usr_local": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.746,
        "memory_change": 14798848,
        "cwd_before": "/usr/local",
        "success": true
      },
      "nested_detection": {
        "returncode": 0,
        "stdout": "Usage: wqm admin [OPTIONS] COMMAND [ARGS]...\n\n  System administration and configuration\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  status          Show comprehensive system status.\n  config          Configuration management.\n  start-engine    Start the Rust processing engine.\n  stop-engine     Stop the Rust processing engine.\n  restart-engine  Restart engine with new configuration.\n  collections     List and manage collections.\n  health          Comprehensive health check.\n",
        "stderr": "",
        "execution_time": 2.701,
        "memory_change": 50806784,
        "cwd_before": "/var/folders/fs/5hjw3wx951scbxlsl52ytgy40000gn/T/tmpy0u8ma_q/level1/level2/level3",
        "success": true
      }
    }
  },
  "analysis": {
    "configuration_precedence": "working",
    "memory_performance": "slow",
    "cross_platform": "compatible",
    "mcp_integration": "working",
    "project_detection_advanced": "working",
    "performance_metrics": {
      "total_test_execution_time": 9.686,
      "max_memory_change_bytes": 26378240,
      "max_memory_change_mb": 25.16
    },
    "issues_found": [
      "Commands are taking too long to execute"
    ],
    "recommendations": []
  },
  "timestamp": 1757421816.7428522
}
# DEPRECATED WORKFLOW - Use semantic-release.yml instead
# This workflow is kept for emergency manual publishing only
# Regular releases should use the automated semantic-release pipeline

name: "[DEPRECATED] Manual PyPI Publishing - Legacy"

# This workflow is deprecated in favor of semantic-release.yml
# It can be used for manual emergency releases if needed

on:
  workflow_dispatch:
    inputs:
      force_manual_publish:
        description: 'Confirm manual publishing (type: MANUAL_PUBLISH)'
        required: true
        type: string
        default: ''
      version_tag:
        description: 'Git tag to publish (e.g., v1.2.3)'
        required: true
        type: string

jobs:
  validate-manual-request:
    name: Validate Manual Publishing Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate manual request
        run: |
          if [ "${{ github.event.inputs.force_manual_publish }}" != "MANUAL_PUBLISH" ]; then
            echo "‚ùå Manual publishing requires confirmation"
            echo "Please type 'MANUAL_PUBLISH' in the force_manual_publish input"
            exit 1
          fi
          
          echo "‚ö†Ô∏è  WARNING: Using deprecated manual publishing workflow"
          echo "üìã Recommended: Use semantic-release.yml for automated releases"
          echo "üè∑Ô∏è  Publishing tag: ${{ github.event.inputs.version_tag }}"

  build:
    name: Build sdist and wheel
    needs: validate-manual-request
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade maturin[patchelf]
      - name: Build distributions
        run: |
          # Build using maturin for Rust integration
          python -m maturin build --release --out dist
          # Also create source distribution
          python -m maturin sdist --out dist
      - name: Install twine and verify metadata
        run: |
          python -m pip install --upgrade twine
          python -m twine check dist/*
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/*
          if-no-files-found: error

  publish-to-testpypi:
    name: Publish to TestPyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.version_tag != ''
    environment:
      name: testpypi
      url: https://test.pypi.org/p/workspace-qdrant-mcp # optional, for nice links in the UI
    permissions:
      id-token: write   # required for Trusted Publishing
      contents: read    # good practice
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
      - name: List distribution files
        run: |
          echo "Distribution files to upload:"
          ls -la dist/
      - name: Publish to TestPyPI (OIDC)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true   # convenient for CI reruns on TestPyPI
          verbose: true         # more detailed output for debugging
        continue-on-error: true # Don't fail if trusted publishing not configured
        id: testpypi-publish
      - name: Publish to TestPyPI (Fallback with Token)
        if: steps.testpypi-publish.outcome == 'failure' && vars.USE_TOKEN_FALLBACK == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publishing Status
        if: always()
        run: |
          if [[ "${{ steps.testpypi-publish.outcome }}" == "success" ]]; then
            echo "‚úÖ Successfully published to TestPyPI using trusted publishing"
          elif [[ "${{ vars.USE_TOKEN_FALLBACK }}" == "true" ]]; then
            echo "‚ö†Ô∏è Trusted publishing failed, attempted token fallback"
          else
            echo "‚ùå Trusted publishing failed. Please configure trusted publishing:"
            echo "üìñ See TRUSTED_PUBLISHING_SETUP.md for setup instructions"
            echo "üîß Or set repository variable USE_TOKEN_FALLBACK=true and configure secrets"
          fi

  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.version_tag != ''
    environment:
      name: pypi
      url: https://pypi.org/p/workspace-qdrant-mcp     # optional
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
      - name: Publish to PyPI (OIDC)
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: true # Don't fail if trusted publishing not configured
        id: pypi-publish
        # By default, the action runs `twine check`, uploads all files, and (since v1.11) emits PEP 740 attestations.
      - name: Publish to PyPI (Fallback with Token)
        if: steps.pypi-publish.outcome == 'failure' && vars.USE_TOKEN_FALLBACK == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
      - name: PyPI Publishing Status
        if: always()
        run: |
          if [[ "${{ steps.pypi-publish.outcome }}" == "success" ]]; then
            echo "‚úÖ Successfully published to PyPI using trusted publishing"
          elif [[ "${{ vars.USE_TOKEN_FALLBACK }}" == "true" ]]; then
            echo "‚ö†Ô∏è Trusted publishing failed, attempted token fallback"
          else
            echo "‚ùå Trusted publishing failed. Please configure trusted publishing:"
            echo "üìñ See TRUSTED_PUBLISHING_SETUP.md for setup instructions"
            echo "üîß Or set repository variable USE_TOKEN_FALLBACK=true and configure secrets"
          fi

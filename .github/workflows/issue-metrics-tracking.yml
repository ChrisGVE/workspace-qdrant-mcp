name: Issue Metrics Tracking

on:
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      generate_report:
        description: 'Generate comprehensive metrics report'
        required: false
        default: 'true'
        type: boolean

jobs:
  generate-metrics:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
          
      - name: Configure GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
      - name: Generate Issue Metrics Report
        run: |
          python3 scripts/issue_metrics_tracker.py > metrics_output.txt 2>&1
          echo "Metrics generation completed"
          
      - name: Create Issue with Metrics Report
        if: github.event_name == 'schedule' || github.event.inputs.generate_report == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the latest metrics report file
            const files = fs.readdirSync('.');
            const reportFiles = files.filter(f => f.includes('issue_metrics_report_') && f.endsWith('.md'));
            
            if (reportFiles.length === 0) {
              console.log('No metrics report found');
              return;
            }
            
            // Get the most recent report
            const latestReport = reportFiles.sort().pop();
            const reportContent = fs.readFileSync(latestReport, 'utf8');
            
            const now = new Date();
            const dateStr = now.toISOString().split('T')[0];
            
            // Create issue with the report
            const issueBody = `# Weekly Issue Metrics Report - ${dateStr}
            
This is an automated weekly report on repository issue metrics and health.

${reportContent}

---

**Next Steps:**
1. Review critical and high-priority issues
2. Address stale issues that need attention  
3. Update milestone progress as needed
4. Consider rebalancing priorities if needed

*This report was automatically generated by the Issue Metrics Tracking workflow.*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Weekly Issue Metrics Report - ${dateStr}`,
              body: issueBody,
              labels: ['metrics', 'automated', 'maintenance']
            });
            
            console.log('Issue metrics report created successfully');
            
      - name: Update Repository Analytics
        run: |
          # Create a simple JSON summary for external tools
          python3 -c "
          import json
          import subprocess
          from datetime import datetime
          
          # Get basic issue counts
          open_issues = subprocess.check_output(['gh', 'issue', 'list', '--state', 'open', '--json', 'number']).decode()
          closed_issues = subprocess.check_output(['gh', 'issue', 'list', '--state', 'closed', '--json', 'number']).decode()
          
          open_count = len(json.loads(open_issues))
          closed_count = len(json.loads(closed_issues))
          
          analytics = {
            'timestamp': datetime.now().isoformat(),
            'total_issues': open_count + closed_count,
            'open_issues': open_count,
            'closed_issues': closed_count,
            'resolution_rate': closed_count / (open_count + closed_count) * 100 if (open_count + closed_count) > 0 else 0
          }
          
          with open('issue_analytics.json', 'w') as f:
            json.dump(analytics, f, indent=2)
          
          print(f'Analytics updated: {analytics}')
          "
          
      - name: Commit and push if changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add issue_analytics.json
            git commit -m "chore: update issue analytics data
            
            Automated update of issue metrics and analytics.
            Generated by Issue Metrics Tracking workflow."
            git push
          else
            echo "No changes to commit"
          fi

  milestone-health-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check Milestone Health
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get all milestones
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            for (const milestone of milestones.data) {
              const dueDate = milestone.due_on ? new Date(milestone.due_on) : null;
              const now = new Date();
              
              // Check if milestone is overdue or approaching due date
              if (dueDate) {
                const daysUntilDue = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
                const totalIssues = milestone.open_issues + milestone.closed_issues;
                const completionRate = totalIssues > 0 ? (milestone.closed_issues / totalIssues * 100) : 0;
                
                let alertLevel = '';
                let message = '';
                
                if (daysUntilDue < 0) {
                  alertLevel = '🚨 OVERDUE';
                  message = `Milestone "${milestone.title}" is ${Math.abs(daysUntilDue)} days overdue!`;
                } else if (daysUntilDue <= 7 && completionRate < 80) {
                  alertLevel = '⚠️ AT RISK';
                  message = `Milestone "${milestone.title}" is due in ${daysUntilDue} days but only ${completionRate.toFixed(1)}% complete`;
                } else if (daysUntilDue <= 14 && completionRate < 50) {
                  alertLevel = '⚠️ BEHIND SCHEDULE';
                  message = `Milestone "${milestone.title}" may be behind schedule (${completionRate.toFixed(1)}% complete, ${daysUntilDue} days remaining)`;
                }
                
                if (message) {
                  console.log(`${alertLevel}: ${message}`);
                  
                  // Create issue for critical milestone alerts
                  if (alertLevel.includes('OVERDUE') || alertLevel.includes('AT RISK')) {
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: `${alertLevel}: Milestone "${milestone.title}" needs attention`,
                      body: `${message}

**Milestone Status:**
- Due Date: ${dueDate.toISOString().split('T')[0]}
- Open Issues: ${milestone.open_issues}
- Closed Issues: ${milestone.closed_issues}
- Completion Rate: ${completionRate.toFixed(1)}%

**Recommended Actions:**
1. Review remaining open issues in this milestone
2. Consider moving non-critical issues to future milestones
3. Focus team effort on critical issues
4. Update milestone due date if needed

[View Milestone](${milestone.html_url})`,
                      labels: ['milestone-alert', 'urgent', 'project-management']
                    });
                  }
                }
              }
            }
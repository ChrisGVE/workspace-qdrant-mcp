name: Build Rust Wheels

on:
  push:
    branches: [main, develop, 'release/**']
    tags: ['v*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      upload_to_pypi:
        description: 'Upload wheels to PyPI'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: "3.10"

jobs:
  # Test Rust engine independently
  test-rust:
    name: Test Rust Engine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-engine/target
          key: rust-${{ runner.os }}-${{ hashFiles('rust-engine/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all --check
        working-directory: rust-engine
      
      - name: Lint with clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        working-directory: rust-engine
      
      - name: Run tests
        run: cargo test --all-features
        working-directory: rust-engine
      
      - name: Build documentation
        run: cargo doc --all-features --no-deps
        working-directory: rust-engine

  # Build wheels for different platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    needs: test-rust
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            platform-name: macosx_x86_64
          
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            platform-name: macosx_arm64
          
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform-name: linux_x86_64
          
          # Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform-name: win_amd64
          
          # Windows ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform-name: win_arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-engine/target
          key: rust-${{ matrix.target }}-${{ hashFiles('rust-engine/Cargo.lock') }}
      
      - name: Install maturin
        run: pip install maturin[patchelf]
      
      - name: Install protoc (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      
      - name: Install protoc (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf
      
      - name: Install protoc (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc
      
      - name: Build wheel
        run: |
          maturin build \
            --release \
            --target ${{ matrix.target }} \
            --out wheels \
            --interpreter python
        env:
          # Platform-specific optimizations
          RUSTFLAGS: >-
            -C target-cpu=native
            -C link-arg=-s
            ${{ runner.os == 'Linux' && '-C link-arg=-Wl,--strip-debug' || '' }}
      
      - name: Test wheel installation
        if: matrix.target != 'aarch64-apple-darwin' && matrix.target != 'aarch64-pc-windows-msvc'
        run: |
          pip install wheels/*.whl
          python -c "
          try:
              from workspace_qdrant_mcp.rust_engine import RustIngestionEngine
              print('‚úÖ Rust engine import successful')
          except ImportError as e:
              print(f'‚ùå Import failed: {e}')
              exit(1)
          "
      
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.target }}
          path: wheels/*.whl

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          pip install build maturin
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler
      
      - name: Build source distribution
        run: maturin sdist --out dist
      
      - name: Test source distribution
        run: |
          # Install Rust for source build testing
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          
          # Test source installation
          pip install dist/*.tar.gz
          python -c "
          try:
              from workspace_qdrant_mcp.rust_engine import RustIngestionEngine
              print('‚úÖ Source distribution install successful')
          except ImportError as e:
              print(f'‚ùå Source install failed: {e}')
              exit(1)
          "
      
      - name: Upload source distribution
        uses: actions/upload-artifact@v3
        with:
          name: source-distribution
          path: dist/*.tar.gz

  # Integration tests with wheels
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334
        options: >-
          --health-cmd="curl -f http://localhost:6333/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Download Linux wheel
        uses: actions/download-artifact@v3
        with:
          name: wheels-x86_64-unknown-linux-gnu
          path: wheels/
      
      - name: Install wheel and dependencies
        run: |
          pip install wheels/*.whl
          pip install pytest pytest-asyncio httpx
      
      - name: Wait for Qdrant
        run: |
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:6333/health > /dev/null; then
              echo "‚úÖ Qdrant is ready"
              break
            fi
            echo "‚è≥ Waiting for Qdrant... ($timeout seconds left)"
            sleep 2
            timeout=$((timeout - 2))
          done
          if [ $timeout -le 0 ]; then
            echo "‚ùå Qdrant failed to start"
            exit 1
          fi
      
      - name: Run integration tests
        run: |
          python -c "
          import asyncio
          from workspace_qdrant_mcp.rust_engine import RustIngestionEngine
          
          async def test_integration():
              print('üß™ Testing Rust engine integration...')
              
              # Create engine instance
              config = {'qdrant_url': 'http://localhost:6333'}
              engine = RustIngestionEngine(config)
              
              try:
                  # Test engine start
                  engine.start()
                  print('‚úÖ Engine started successfully')
                  
                  # Test basic functionality
                  state = engine.get_state()
                  print(f'‚úÖ Engine state: {state}')
                  
                  # Test gRPC port
                  port = engine.grpc_port()
                  print(f'‚úÖ gRPC port: {port}')
                  
                  # Test engine stop
                  engine.stop()
                  print('‚úÖ Engine stopped successfully')
                  
              except Exception as e:
                  print(f'‚ùå Integration test failed: {e}')
                  raise
          
          asyncio.run(test_integration())
          print('üéâ All integration tests passed!')
          "
        env:
          QDRANT_URL: http://localhost:6333

  # Security and vulnerability scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-rust
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-engine/target
          key: rust-security-${{ hashFiles('rust-engine/Cargo.lock') }}
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit
        working-directory: rust-engine
      
      - name: Install cargo-deny
        run: cargo install cargo-deny
      
      - name: Check licenses and dependencies
        run: cargo deny check
        working-directory: rust-engine
        continue-on-error: true  # Don't fail build on license issues

  # Benchmark performance
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test-rust
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust-engine/target
          key: rust-bench-${{ hashFiles('rust-engine/Cargo.lock') }}
      
      - name: Run benchmarks
        run: cargo bench --features benchmarks
        working-directory: rust-engine
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: rust-engine/target/criterion/

  # Publish to PyPI
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist, integration-tests]
    if: >-
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_to_pypi == 'true')
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Prepare distribution files
        run: |
          mkdir -p dist/
          find artifacts/ -name "*.whl" -exec cp {} dist/ \;
          find artifacts/ -name "*.tar.gz" -exec cp {} dist/ \;
          ls -la dist/
      
      - name: Check distribution files
        run: |
          pip install twine
          twine check dist/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          verify-metadata: true

  # Create GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Create release assets
        run: |
          mkdir -p release-assets/
          find artifacts/ -name "*.whl" -exec cp {} release-assets/ \;
          find artifacts/ -name "*.tar.gz" -exec cp {} release-assets/ \;
          
          # Create checksums
          cd release-assets/
          sha256sum * > SHA256SUMS
          cd ..
      
      - name: Extract release notes
        id: extract-notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Extract release notes from CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | head -n -1 > release-notes.md
          else
            echo "Release $VERSION" > release-notes.md
            echo "" >> release-notes.md
            echo "üöÄ New version with Rust ingestion engine v2.0 architecture" >> release-notes.md
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release v${{ steps.extract-notes.outputs.version }}"
          body_path: release-notes.md
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Cleanup old artifacts
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [publish, release]
    if: always()
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            wheels-*
            source-distribution
            benchmark-results
          failOnError: false
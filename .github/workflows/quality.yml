name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies and analysis tools
      run: |
        uv venv --python 3.11
        . .venv/bin/activate
        uv pip install -e ".[dev]"
        uv pip install bandit[toml] safety vulture radon

    - name: Run comprehensive ruff analysis
      run: |
        . .venv/bin/activate
        echo "## Ruff Analysis" >> quality-report.md
        echo "### Code Quality Issues" >> quality-report.md
        ruff check src/ tests/ --output-format=github >> quality-report.md || true
        
        echo "### Formatting Issues" >> quality-report.md
        ruff format --check --diff src/ tests/ >> quality-report.md || true

    - name: Run detailed mypy analysis
      run: |
        . .venv/bin/activate
        echo "## MyPy Type Analysis" >> quality-report.md
        echo "ðŸ”§ MyPy temporarily disabled to focus on functionality" >> quality-report.md
        echo "Will be re-enabled with proper type annotations in future releases" >> quality-report.md
        # mypy src/workspace_qdrant_mcp/ --html-report mypy-report/ --show-error-codes --pretty >> quality-report.md || true

    - name: Run comprehensive security analysis
      run: |
        . .venv/bin/activate
        echo "## Security Analysis" >> quality-report.md
        
        echo "### Bandit Security Scanner" >> quality-report.md
        bandit -r src/workspace_qdrant_mcp/ -f txt >> quality-report.md || true
        
        echo "### Safety Vulnerability Check" >> quality-report.md
        safety check >> quality-report.md || true

    - name: Calculate code complexity
      run: |
        . .venv/bin/activate
        echo "## Code Complexity Analysis" >> quality-report.md
        
        echo "### Cyclomatic Complexity" >> quality-report.md
        radon cc src/workspace_qdrant_mcp/ -s >> quality-report.md || true
        
        echo "### Maintainability Index" >> quality-report.md
        radon mi src/workspace_qdrant_mcp/ -s >> quality-report.md || true
        
        echo "### Halstead Complexity" >> quality-report.md
        radon hal src/workspace_qdrant_mcp/ >> quality-report.md || true

    - name: Find dead code
      run: |
        . .venv/bin/activate
        echo "## Dead Code Analysis" >> quality-report.md
        vulture src/workspace_qdrant_mcp/ >> quality-report.md || true

    - name: Generate test coverage report
      run: |
        . .venv/bin/activate
        pytest --cov=src/workspace_qdrant_mcp --cov-report=html --cov-report=term --cov-fail-under=5 >> coverage-output.txt
        echo "## Test Coverage Report" >> quality-report.md
        echo '```' >> quality-report.md
        cat coverage-output.txt >> quality-report.md
        echo '```' >> quality-report.md

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-reports
        path: |
          quality-report.md
          mypy-report/
          htmlcov/
          coverage-output.txt

    - name: Comment PR with quality summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('quality-report.md')) {
            const qualityReport = fs.readFileSync('quality-report.md', 'utf8');
            
            // Truncate report if too long for PR comment
            const maxLength = 65000;
            const report = qualityReport.length > maxLength 
              ? qualityReport.substring(0, maxLength) + '\n\n... (report truncated)'
              : qualityReport;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Quality Analysis Report\n\n${report}`
            });
          }

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        . .venv/bin/activate
        uv pip install -e ".[dev]"
        uv pip install safety pip-audit

    - name: Run pip-audit
      run: |
        . .venv/bin/activate
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: Check for outdated dependencies
      run: |
        . .venv/bin/activate
        pip list --outdated --format=json > outdated-deps.json || true
        
        echo "ðŸ“¦ Outdated Dependencies:" >> dependency-report.md
        python -c "
        import json
        try:
            with open('outdated-deps.json') as f:
                outdated = json.load(f)
            if outdated:
                print('| Package | Current | Latest |')
                print('|---------|---------|--------|')
                for pkg in outdated:
                    print(f'| {pkg[\"name\"]} | {pkg[\"version\"]} | {pkg[\"latest_version\"]} |')
            else:
                print('All dependencies are up to date! ðŸŽ‰')
        except:
            print('Could not parse outdated dependencies')
        " >> dependency-report.md

    - name: Generate dependency tree
      run: |
        . .venv/bin/activate
        echo "ðŸŒ³ Dependency Tree:" >> dependency-report.md
        echo '```' >> dependency-report.md
        pip show workspace-qdrant-mcp >> dependency-report.md || true
        echo '```' >> dependency-report.md

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          pip-audit-report.json
          outdated-deps.json
          dependency-report.md

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only on main branch

    services:
      qdrant:
        image: qdrant/qdrant:v1.7.0
        ports:
          - 6333:6333

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        . .venv/bin/activate
        uv pip install -e ".[dev]"
        uv pip install memory-profiler

    - name: Wait for Qdrant to be ready
      run: |
        echo "Waiting for Qdrant to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:6333/healthz; do sleep 2; done'
        curl -f http://localhost:6333/healthz

    - name: Run performance benchmarks with profiling
      env:
        QDRANT_URL: http://localhost:6333
      run: |
        . .venv/bin/activate
        
        echo "ðŸš€ Performance Benchmark Results" > performance-report.md
        echo "Generated: $(date)" >> performance-report.md
        echo "" >> performance-report.md
        
        echo "## Simple Benchmark" >> performance-report.md
        echo '```' >> performance-report.md
        python dev/benchmarks/tools/authoritative_benchmark.py --skip-oss --chunk-sizes 1000 >> performance-report.md
        echo '```' >> performance-report.md
        
        echo "## Comprehensive Benchmark" >> performance-report.md  
        echo '```' >> performance-report.md
        timeout 300s python dev/benchmarks/tools/authoritative_benchmark.py --chunk-sizes 1000,2000 >> performance-report.md || echo "Benchmark timed out after 5 minutes" >> performance-report.md
        echo '```' >> performance-report.md

    - name: Memory profiling
      run: |
        . .venv/bin/activate
        echo "## Memory Usage Profile" >> performance-report.md
        echo '```' >> performance-report.md
        python -m memory_profiler dev/benchmarks/tools/authoritative_benchmark.py --skip-oss --chunk-sizes 1000 >> performance-report.md || echo "Memory profiling failed" >> performance-report.md
        echo '```' >> performance-report.md

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: performance-report.md

    - name: Store performance metrics
      run: |
        # This would integrate with a performance tracking system
        echo "ðŸ“ˆ Performance metrics stored for trend analysis"
        echo "Commit: ${{ github.sha }}" >> performance-metrics.json
        echo "Date: $(date -Iseconds)" >> performance-metrics.json

  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v1

    - name: Install dependencies
      run: |
        uv venv --python 3.11
        . .venv/bin/activate
        uv pip install -e ".[dev]"
        uv pip install pydocstyle docstring-parser

    - name: Check docstring quality
      run: |
        . .venv/bin/activate
        echo "## Documentation Quality Report" > doc-report.md
        echo "### Docstring Analysis" >> doc-report.md
        pydocstyle src/workspace_qdrant_mcp/ >> doc-report.md

    - name: Generate API documentation
      run: |
        . .venv/bin/activate
        python -c "
        import pkgutil
        import importlib
        import inspect
        import workspace_qdrant_mcp
        from typing import get_type_hints
        
        def get_clean_docstring(obj):
            '''Extract and clean docstring for documentation.'''
            doc = inspect.getdoc(obj)
            if doc:
                # Clean up docstring formatting
                lines = doc.split('\n')
                if len(lines) > 1 and lines[0].strip() and not lines[1].strip():
                    # Remove empty line after first line if present
                    lines = [lines[0]] + [line for line in lines[2:] if line.strip()]
                return '\n'.join(lines).strip()
            return 'No documentation available.'
        
        def document_module(module_name):
            '''Generate documentation for a single module.'''
            try:
                module = importlib.import_module(module_name)
                print(f'\n## {module_name}')
                
                # Module docstring
                module_doc = get_clean_docstring(module)
                if module_doc != 'No documentation available.':
                    print(f'{module_doc}\n')
                
                # Get all public items
                public_items = [(name, getattr(module, name)) for name in dir(module) 
                               if not name.startswith('_') and hasattr(module, name)]
                
                # Sort by type: classes first, then functions, then others
                classes = [(n, o) for n, o in public_items if inspect.isclass(o)]
                functions = [(n, o) for n, o in public_items if inspect.isfunction(o)]
                others = [(n, o) for n, o in public_items 
                         if not inspect.isclass(o) and not inspect.isfunction(o) 
                         and not inspect.ismodule(o)]
                
                # Document classes
                if classes:
                    print('### Classes\n')
                    for name, cls in sorted(classes):
                        try:
                            print(f'#### {name}')
                            print(f'```python\nclass {name}\n```')
                            doc = get_clean_docstring(cls)
                            print(f'{doc}\n')
                            
                            # Document public methods
                            methods = [(n, m) for n, m in inspect.getmembers(cls, inspect.isfunction)
                                     if not n.startswith('_')]
                            if methods:
                                print('**Methods:**')
                                for method_name, method in sorted(methods):
                                    try:
                                        sig = inspect.signature(method)
                                        print(f'- `{method_name}{sig}`: {get_clean_docstring(method).split(\".\")[0]}.')
                                    except Exception:
                                        print(f'- `{method_name}()`: {get_clean_docstring(method).split(\".\")[0]}.')
                                print()
                        except Exception as e:
                            print(f'Error documenting class {name}: {e}\n')
                
                # Document functions
                if functions:
                    print('### Functions\n')
                    for name, func in sorted(functions):
                        try:
                            sig = inspect.signature(func)
                            print(f'#### {name}{sig}')
                            print(f'```python\ndef {name}{sig}\n```')
                            doc = get_clean_docstring(func)
                            print(f'{doc}\n')
                        except Exception as e:
                            print(f'Error documenting function {name}: {e}\n')
                
                # Document other public items (constants, variables)
                if others:
                    print('### Constants & Variables\n')
                    for name, obj in sorted(others):
                        try:
                            obj_type = type(obj).__name__
                            print(f'- **{name}** ({obj_type}): {str(obj)[:100]}')
                        except Exception:
                            print(f'- **{name}**: Available')
                    print()
                        
            except Exception as e:
                print(f'Error documenting module {module_name}: {e}')
        
        print('# API Documentation')
        print('Generated automatically from source code docstrings.\n')
        
        # Document key modules in logical order
        key_modules = [
            'workspace_qdrant_mcp.server',
            'workspace_qdrant_mcp.tools',
            'workspace_qdrant_mcp.core.config', 
            'workspace_qdrant_mcp.core.hybrid_search',
            'workspace_qdrant_mcp.core.memory',
            'workspace_qdrant_mcp.core.collection_naming'
        ]
        
        print('## Core API Modules\n')
        for module_name in key_modules:
            try:
                document_module(module_name)
            except Exception as e:
                print(f'Could not document {module_name}: {e}')
        
        # Document all other modules
        print('\n## Additional Modules\n')
        documented_modules = set(key_modules)
        for importer, modname, ispkg in pkgutil.walk_packages(
            workspace_qdrant_mcp.__path__, 
            workspace_qdrant_mcp.__name__ + '.'
        ):
            if modname not in documented_modules and not modname.endswith('__'):
                document_module(modname)
        " >> doc-report.md

    - name: Upload documentation reports
      uses: actions/upload-artifact@v4
      with:
        name: documentation-reports
        path: doc-report.md
name: Build and Push Docker Images

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.3.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to build (e.g., 0.3.0)'
        required: true
        type: string
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Multi-Architecture Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Extract version from git tag (remove 'v' prefix)
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT
          echo "minor=$(echo $VERSION | cut -d. -f1-2)" >> $GITHUB_OUTPUT

          echo "Building version: $VERSION"

      - name: Generate Docker tags
        id: meta
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR="${{ steps.version.outputs.major }}"
          MINOR="${{ steps.version.outputs.minor }}"
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE="${{ env.IMAGE_NAME }}"

          # Generate tags
          TAGS="${REGISTRY}/${IMAGE}:${VERSION}"
          TAGS="${TAGS},${REGISTRY}/${IMAGE}:${MINOR}"
          TAGS="${REGISTRY}/${IMAGE}:${MAJOR}"
          TAGS="${TAGS},${REGISTRY}/${IMAGE}:latest"

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

          # Generate labels
          LABELS="org.opencontainers.image.title=workspace-qdrant-mcp"
          LABELS="${LABELS}\norg.opencontainers.image.description=Project-scoped Qdrant MCP server with scratchbook functionality"
          LABELS="${LABELS}\norg.opencontainers.image.version=${VERSION}"
          LABELS="${LABELS}\norg.opencontainers.image.vendor=Christian C. Berclaz"
          LABELS="${LABELS}\norg.opencontainers.image.licenses=MIT"

          echo "labels<<EOF" >> $GITHUB_OUTPUT
          echo -e "${LABELS}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine build platforms
        id: platforms
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PLATFORMS="${{ github.event.inputs.platforms }}"
          else
            PLATFORMS="linux/amd64,linux/arm64"
          fi

          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "Building for platforms: $PLATFORMS"

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: ${{ steps.platforms.outputs.platforms }}
          push: ${{ github.event.inputs.push_images != 'false' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
          build-args: |
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1

      - name: Generate image summary
        run: |
          echo "## Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ steps.platforms.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Tags" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Latest version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Specific version" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Digest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ steps.build-and-push.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY

      - name: Verify image is pullable
        if: github.event.inputs.push_images != 'false'
        run: |
          echo "Verifying images are pullable from registry..."

          # Wait for registry propagation
          sleep 10

          # Verify latest tag
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Verify version tag
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}

          echo "‚úÖ Images successfully verified and pullable"

      - name: Test image functionality
        if: github.event.inputs.push_images != 'false'
        run: |
          echo "Testing image functionality..."

          # Run basic health check in container
          docker run --rm \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            python -c "import workspace_qdrant_mcp; print(f'Version: {workspace_qdrant_mcp.__version__}')" || {
            echo "‚ùå Image test failed"
            exit 1
          }

          echo "‚úÖ Image functionality test passed"

      - name: Create release comment
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const registry = '${{ env.REGISTRY }}';
            const imageName = '${{ env.IMAGE_NAME }}';

            // Find release by tag
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const release = releases.data.find(r => r.tag_name === `v${version}`);

            if (release) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: release.id,
                body: `## üê≥ Docker Images Published

**Version:** ${version}
**Registry:** ${registry}
**Platforms:** linux/amd64, linux/arm64

### Available Tags

\`\`\`bash
# Latest version
docker pull ${registry}/${imageName}:latest

# Specific version
docker pull ${registry}/${imageName}:${version}
docker pull ${registry}/${imageName}:${{ steps.version.outputs.minor }}
docker pull ${registry}/${imageName}:${{ steps.version.outputs.major }}
\`\`\`

### Quick Start

\`\`\`bash
# Run MCP server
docker run -d \\
  -p 8000:8000 \\
  -e QDRANT_URL=http://qdrant:6333 \\
  -e QDRANT_API_KEY=your_api_key \\
  ${registry}/${imageName}:${version}

# Run CLI
docker run --rm \\
  ${registry}/${imageName}:${version} \\
  wqm --help
\`\`\`

**Image Digest:** \`${{ steps.build-and-push.outputs.digest }}\`
`
              });
            }

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-build-metadata
          path: |
            docker-metadata.json
          retention-days: 30

name: Semantic Release and PyPI Publishing

on:
  push:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run semantic-release in dry-run mode'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  PYTHON_VERSION: "3.10"

jobs:
  # Pre-flight checks and quality gates
  pre-flight:
    name: Pre-flight Quality Checks
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for semantic analysis

      - name: Set up Node.js for semantic-release
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check if release is needed
        id: check
        run: |
          # Run semantic-release in dry-run mode to check if release is needed
          npx semantic-release --dry-run > release-check.log 2>&1 || true
          if grep -q "The next release version is" release-check.log; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "🚀 Release detected. Proceeding with full pipeline."
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No release needed. Skipping pipeline."
          fi
          cat release-check.log

      - name: Set up Python
        if: steps.check.outputs.should_release == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run quality checks
        if: steps.check.outputs.should_release == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
          # Code quality checks
          echo "🔍 Running code quality checks..."
          ruff check src/ tests/ || { echo "❌ Ruff check failed"; exit 1; }
          black --check src/ tests/ || { echo "❌ Black formatting check failed"; exit 1; }
          mypy src/ || { echo "❌ MyPy type checking failed"; exit 1; }
          
          echo "✅ All quality checks passed"

  # Semantic release and version calculation
  semantic-release:
    name: Semantic Release
    needs: pre-flight
    if: needs.pre-flight.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Semantic Release
        id: semantic
        if: github.event.inputs.dry_run != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release
          echo "Semantic release completed"

      - name: Run Semantic Release (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧪 Running semantic-release in dry-run mode..."
          npx semantic-release --dry-run

  # Build distributions after successful version bump
  build-distributions:
    name: Build Python Distributions
    needs: [pre-flight, semantic-release]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout updated repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get the updated version
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build maturin[patchelf]
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Build distributions
        run: |
          # Build using maturin for Rust integration
          python -m maturin build --release --out dist
          # Also create source distribution
          python -m maturin sdist --out dist
          
          echo "📦 Built distributions:"
          ls -la dist/

      - name: Verify distributions
        run: |
          python -m pip install --upgrade twine
          python -m twine check dist/*
          echo "✅ Distribution verification successful"

      - name: Upload distributions as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-distributions
          path: dist/*
          retention-days: 7

  # Cross-platform wheel building
  build-wheels:
    name: Build Cross-Platform Wheels
    needs: [pre-flight, semantic-release]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest 
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    
    steps:
      - name: Checkout updated repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install protoc (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install protoc (macOS)  
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install protoc (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc

      - name: Install maturin
        run: pip install maturin[patchelf]

      - name: Build wheel
        run: |
          maturin build \
            --release \
            --target ${{ matrix.target }} \
            --out wheels \
            --interpreter python
        working-directory: rust-engine-legacy/python-bindings
        env:
          PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: wheels/*.whl

  # Comprehensive testing before PyPI publication
  test-distributions:
    name: Test Distributions
    needs: [build-distributions, build-wheels]
    runs-on: ubuntu-latest
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334
        options: >-
          --health-cmd="curl -f http://localhost:6333/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/

      - name: Download Linux wheel
        uses: actions/download-artifact@v4
        with:
          name: wheels-x86_64-unknown-linux-gnu
          path: wheels/

      - name: Test source distribution installation
        run: |
          python -m venv test-sdist
          source test-sdist/bin/activate
          pip install --upgrade pip
          pip install dist/*.tar.gz
          
          # Test CLI commands
          workspace-qdrant-mcp --help
          wqm --help
          wqutil --help
          
          echo "✅ Source distribution installation test passed"

      - name: Test wheel installation
        run: |
          python -m venv test-wheel  
          source test-wheel/bin/activate
          pip install --upgrade pip
          pip install wheels/*.whl
          
          # Test imports
          python -c "import workspace_qdrant_mcp; print(f'Version: {workspace_qdrant_mcp.__version__}')"
          
          # Test CLI commands
          workspace-qdrant-mcp --help
          
          echo "✅ Wheel installation test passed"

      - name: Run integration tests
        run: |
          source test-wheel/bin/activate
          pip install pytest pytest-asyncio httpx
          
          # Wait for Qdrant
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:6333/health > /dev/null; then
              echo "✅ Qdrant is ready"
              break
            fi
            sleep 2
            timeout=$((timeout - 2))
          done
          
          # Run basic integration tests
          python -c "
          import asyncio
          from workspace_qdrant_mcp.core.qdrant_client import QdrantClientManager
          
          async def test():
              client = QdrantClientManager('http://localhost:6333')
              await client.initialize()
              print('✅ Qdrant connection successful')
              
          asyncio.run(test())
          "

  # Publish to Test PyPI first for validation
  publish-testpypi:
    name: Publish to Test PyPI
    needs: [semantic-release, build-distributions, test-distributions]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/workspace-qdrant-mcp
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-distributions
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

      - name: Test installation from Test PyPI
        run: |
          sleep 30  # Wait for Test PyPI propagation
          python -m venv test-testpypi
          source test-testpypi/bin/activate
          pip install --upgrade pip
          
          # Try installing from Test PyPI
          pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ workspace-qdrant-mcp==${{ needs.semantic-release.outputs.new_release_version }}
          
          # Test basic functionality
          workspace-qdrant-mcp --help
          python -c "import workspace_qdrant_mcp; print(workspace_qdrant_mcp.__version__)"
          
          echo "✅ Test PyPI installation verification successful"

  # Production PyPI publishing with final verification
  publish-pypi:
    name: Publish to Production PyPI
    needs: [semantic-release, build-distributions, test-distributions, publish-testpypi]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/workspace-qdrant-mcp
    permissions:
      id-token: write
      contents: read
      
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: python-distributions  
          path: dist/

      - name: Final verification
        run: |
          pip install --upgrade twine
          twine check dist/*
          
          echo "📋 Final distribution summary:"
          ls -la dist/
          echo "🏷️ Release version: ${{ needs.semantic-release.outputs.new_release_version }}"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          verify-metadata: true

  # Post-release verification and notification
  post-release-verification:
    name: Post-Release Verification  
    needs: [semantic-release, publish-pypi]
    if: needs.semantic-release.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for PyPI propagation
        run: |
          echo "⏳ Waiting for PyPI propagation..."
          sleep 120

      - name: Verify PyPI installation
        run: |
          python -m venv test-production
          source test-production/bin/activate
          pip install --upgrade pip
          
          # Install from production PyPI
          pip install workspace-qdrant-mcp==${{ needs.semantic-release.outputs.new_release_version }}
          
          # Verify installation
          workspace-qdrant-mcp --help
          python -c "
          import workspace_qdrant_mcp
          print(f'✅ Production PyPI installation successful')
          print(f'Version: {workspace_qdrant_mcp.__version__}')
          assert workspace_qdrant_mcp.__version__ == '${{ needs.semantic-release.outputs.new_release_version }}', 'Version mismatch!'
          "

      - name: Update GitHub release with wheels
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            console.log('🚀 Release ${{ needs.semantic-release.outputs.new_release_git_tag }} published successfully!');
            console.log('📦 Available on PyPI: https://pypi.org/project/workspace-qdrant-mcp/${{ needs.semantic-release.outputs.new_release_version }}/');
            
            // Add success comment to the release
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.semantic-release.outputs.new_release_git_tag }}'
            });
            
            const successMessage = `
            ## 🎉 Release Successful!
            
            **Version:** ${{ needs.semantic-release.outputs.new_release_version }}
            **PyPI:** https://pypi.org/project/workspace-qdrant-mcp/${{ needs.semantic-release.outputs.new_release_version }}/
            **Installation:** \`pip install workspace-qdrant-mcp==${{ needs.semantic-release.outputs.new_release_version }}\`
            
            ✅ All verification tests passed
            ✅ Available on PyPI  
            ✅ CLI commands working
            ✅ Python imports successful
            `;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: release.body + '\n\n' + successMessage
            });

  # Cleanup artifacts and handle failures
  cleanup:
    name: Cleanup and Failure Handling
    needs: [pre-flight, semantic-release, build-distributions, test-distributions, publish-testpypi, publish-pypi, post-release-verification]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Clean up artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            python-distributions
            wheels-*
          failOnError: false

      - name: Handle failure notifications
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            // Create issue for failed releases
            if ('${{ needs.semantic-release.outputs.new_release_published }}' === 'true') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Release Pipeline Failed - Version ${{ needs.semantic-release.outputs.new_release_version }}',
                body: `
                The automated release pipeline failed for version ${{ needs.semantic-release.outputs.new_release_version }}.
                
                **Failed Job:** ${{ github.job }}
                **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
                
                Please investigate and potentially trigger a manual release.
                `,
                labels: ['bug', 'release-failure', 'priority-high']
              });
            }

      - name: Report pipeline summary
        if: always()
        run: |
          echo "## 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-flight:** ${{ needs.pre-flight.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Semantic Release:** ${{ needs.semantic-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Distributions:** ${{ needs.build-distributions.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Distributions:** ${{ needs.test-distributions.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Test PyPI:** ${{ needs.publish-testpypi.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production PyPI:** ${{ needs.publish-pypi.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-Release Verification:** ${{ needs.post-release-verification.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.semantic-release.outputs.new_release_published }}" = "true" ]; then
            echo "🚀 **New Release:** ${{ needs.semantic-release.outputs.new_release_version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Status:** No release required" >> $GITHUB_STEP_SUMMARY
          fi
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import ingestion_pb2 as ingestion__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ingestion_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class IngestServiceStub(object):
    """Main ingestion service for document processing, file watching, and search operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessDocument = channel.unary_unary(
                '/workspace_qdrant.v1.IngestService/ProcessDocument',
                request_serializer=ingestion__pb2.ProcessDocumentRequest.SerializeToString,
                response_deserializer=ingestion__pb2.ProcessDocumentResponse.FromString,
                _registered_method=True)
        self.StartWatching = channel.unary_stream(
                '/workspace_qdrant.v1.IngestService/StartWatching',
                request_serializer=ingestion__pb2.StartWatchingRequest.SerializeToString,
                response_deserializer=ingestion__pb2.WatchingUpdate.FromString,
                _registered_method=True)
        self.StopWatching = channel.unary_unary(
                '/workspace_qdrant.v1.IngestService/StopWatching',
                request_serializer=ingestion__pb2.StopWatchingRequest.SerializeToString,
                response_deserializer=ingestion__pb2.StopWatchingResponse.FromString,
                _registered_method=True)
        self.ExecuteQuery = channel.unary_unary(
                '/workspace_qdrant.v1.IngestService/ExecuteQuery',
                request_serializer=ingestion__pb2.ExecuteQueryRequest.SerializeToString,
                response_deserializer=ingestion__pb2.ExecuteQueryResponse.FromString,
                _registered_method=True)
        self.GetStats = channel.unary_unary(
                '/workspace_qdrant.v1.IngestService/GetStats',
                request_serializer=ingestion__pb2.GetStatsRequest.SerializeToString,
                response_deserializer=ingestion__pb2.GetStatsResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/workspace_qdrant.v1.IngestService/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=ingestion__pb2.HealthResponse.FromString,
                _registered_method=True)


class IngestServiceServicer(object):
    """Main ingestion service for document processing, file watching, and search operations
    """

    def ProcessDocument(self, request, context):
        """Process a single document for ingestion
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartWatching(self, request, context):
        """Start watching a directory for file changes (streaming response for updates)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopWatching(self, request, context):
        """Stop watching a specific watch configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteQuery(self, request, context):
        """Execute a search query against the indexed documents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStats(self, request, context):
        """Get statistics and health information about the ingestion engine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check endpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IngestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessDocument,
                    request_deserializer=ingestion__pb2.ProcessDocumentRequest.FromString,
                    response_serializer=ingestion__pb2.ProcessDocumentResponse.SerializeToString,
            ),
            'StartWatching': grpc.unary_stream_rpc_method_handler(
                    servicer.StartWatching,
                    request_deserializer=ingestion__pb2.StartWatchingRequest.FromString,
                    response_serializer=ingestion__pb2.WatchingUpdate.SerializeToString,
            ),
            'StopWatching': grpc.unary_unary_rpc_method_handler(
                    servicer.StopWatching,
                    request_deserializer=ingestion__pb2.StopWatchingRequest.FromString,
                    response_serializer=ingestion__pb2.StopWatchingResponse.SerializeToString,
            ),
            'ExecuteQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteQuery,
                    request_deserializer=ingestion__pb2.ExecuteQueryRequest.FromString,
                    response_serializer=ingestion__pb2.ExecuteQueryResponse.SerializeToString,
            ),
            'GetStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStats,
                    request_deserializer=ingestion__pb2.GetStatsRequest.FromString,
                    response_serializer=ingestion__pb2.GetStatsResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=ingestion__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workspace_qdrant.v1.IngestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workspace_qdrant.v1.IngestService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IngestService(object):
    """Main ingestion service for document processing, file watching, and search operations
    """

    @staticmethod
    def ProcessDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_qdrant.v1.IngestService/ProcessDocument',
            ingestion__pb2.ProcessDocumentRequest.SerializeToString,
            ingestion__pb2.ProcessDocumentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartWatching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/workspace_qdrant.v1.IngestService/StartWatching',
            ingestion__pb2.StartWatchingRequest.SerializeToString,
            ingestion__pb2.WatchingUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopWatching(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_qdrant.v1.IngestService/StopWatching',
            ingestion__pb2.StopWatchingRequest.SerializeToString,
            ingestion__pb2.StopWatchingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_qdrant.v1.IngestService/ExecuteQuery',
            ingestion__pb2.ExecuteQueryRequest.SerializeToString,
            ingestion__pb2.ExecuteQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_qdrant.v1.IngestService/GetStats',
            ingestion__pb2.GetStatsRequest.SerializeToString,
            ingestion__pb2.GetStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_qdrant.v1.IngestService/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ingestion__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

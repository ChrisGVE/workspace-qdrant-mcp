# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import workspace_daemon_pb2 as workspace__daemon__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in workspace_daemon_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SystemServiceStub(object):
    """=============================================================================
    SERVICE DEFINITIONS
    =============================================================================
    This protocol defines 3 services with 15 total RPCs for communication
    between the Rust daemon and Python components (MCP server, CLI).

    Design principles:
    - Single writer pattern: Only daemon writes to Qdrant
    - Queue-based async processing: File operations via SQLite queue
    - Direct sync ingestion: Text content via gRPC IngestText
    - Event-driven refresh: Lightweight signals for state changes
    =============================================================================

    -----------------------------------------------------------------------------
    1. SystemService (7 RPCs)
    -----------------------------------------------------------------------------
    Purpose: System health monitoring, status reporting, refresh signaling,
    and lifecycle management.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/workspace_daemon.SystemService/HealthCheck',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=workspace__daemon__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/workspace_daemon.SystemService/GetStatus',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=workspace__daemon__pb2.SystemStatusResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/workspace_daemon.SystemService/GetMetrics',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=workspace__daemon__pb2.MetricsResponse.FromString,
                _registered_method=True)
        self.SendRefreshSignal = channel.unary_unary(
                '/workspace_daemon.SystemService/SendRefreshSignal',
                request_serializer=workspace__daemon__pb2.RefreshSignalRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.NotifyServerStatus = channel.unary_unary(
                '/workspace_daemon.SystemService/NotifyServerStatus',
                request_serializer=workspace__daemon__pb2.ServerStatusNotification.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.PauseAllWatchers = channel.unary_unary(
                '/workspace_daemon.SystemService/PauseAllWatchers',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ResumeAllWatchers = channel.unary_unary(
                '/workspace_daemon.SystemService/ResumeAllWatchers',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class SystemServiceServicer(object):
    """=============================================================================
    SERVICE DEFINITIONS
    =============================================================================
    This protocol defines 3 services with 15 total RPCs for communication
    between the Rust daemon and Python components (MCP server, CLI).

    Design principles:
    - Single writer pattern: Only daemon writes to Qdrant
    - Queue-based async processing: File operations via SQLite queue
    - Direct sync ingestion: Text content via gRPC IngestText
    - Event-driven refresh: Lightweight signals for state changes
    =============================================================================

    -----------------------------------------------------------------------------
    1. SystemService (7 RPCs)
    -----------------------------------------------------------------------------
    Purpose: System health monitoring, status reporting, refresh signaling,
    and lifecycle management.

    """

    def HealthCheck(self, request, context):
        """Quick health check for monitoring/alerting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Comprehensive system state snapshot
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Current performance metrics (no historical data)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRefreshSignal(self, request, context):
        """Signal database state changes for event-driven refresh
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyServerStatus(self, request, context):
        """MCP/CLI server lifecycle notifications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseAllWatchers(self, request, context):
        """Pause all file watchers (master switch)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeAllWatchers(self, request, context):
        """Resume all file watchers (master switch)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SystemServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=workspace__daemon__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=workspace__daemon__pb2.SystemStatusResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=workspace__daemon__pb2.MetricsResponse.SerializeToString,
            ),
            'SendRefreshSignal': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRefreshSignal,
                    request_deserializer=workspace__daemon__pb2.RefreshSignalRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'NotifyServerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyServerStatus,
                    request_deserializer=workspace__daemon__pb2.ServerStatusNotification.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PauseAllWatchers': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseAllWatchers,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ResumeAllWatchers': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeAllWatchers,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workspace_daemon.SystemService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workspace_daemon.SystemService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SystemService(object):
    """=============================================================================
    SERVICE DEFINITIONS
    =============================================================================
    This protocol defines 3 services with 15 total RPCs for communication
    between the Rust daemon and Python components (MCP server, CLI).

    Design principles:
    - Single writer pattern: Only daemon writes to Qdrant
    - Queue-based async processing: File operations via SQLite queue
    - Direct sync ingestion: Text content via gRPC IngestText
    - Event-driven refresh: Lightweight signals for state changes
    =============================================================================

    -----------------------------------------------------------------------------
    1. SystemService (7 RPCs)
    -----------------------------------------------------------------------------
    Purpose: System health monitoring, status reporting, refresh signaling,
    and lifecycle management.

    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/HealthCheck',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            workspace__daemon__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/GetStatus',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            workspace__daemon__pb2.SystemStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/GetMetrics',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            workspace__daemon__pb2.MetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendRefreshSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/SendRefreshSignal',
            workspace__daemon__pb2.RefreshSignalRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyServerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/NotifyServerStatus',
            workspace__daemon__pb2.ServerStatusNotification.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseAllWatchers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/PauseAllWatchers',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResumeAllWatchers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.SystemService/ResumeAllWatchers',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CollectionServiceStub(object):
    """-----------------------------------------------------------------------------
    2. CollectionService (5 RPCs)
    -----------------------------------------------------------------------------
    Purpose: Qdrant collection lifecycle and alias management.
    Note: ListCollections removed - MCP queries Qdrant directly.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCollection = channel.unary_unary(
                '/workspace_daemon.CollectionService/CreateCollection',
                request_serializer=workspace__daemon__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=workspace__daemon__pb2.CreateCollectionResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/workspace_daemon.CollectionService/DeleteCollection',
                request_serializer=workspace__daemon__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.CreateCollectionAlias = channel.unary_unary(
                '/workspace_daemon.CollectionService/CreateCollectionAlias',
                request_serializer=workspace__daemon__pb2.CreateAliasRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DeleteCollectionAlias = channel.unary_unary(
                '/workspace_daemon.CollectionService/DeleteCollectionAlias',
                request_serializer=workspace__daemon__pb2.DeleteAliasRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.RenameCollectionAlias = channel.unary_unary(
                '/workspace_daemon.CollectionService/RenameCollectionAlias',
                request_serializer=workspace__daemon__pb2.RenameAliasRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class CollectionServiceServicer(object):
    """-----------------------------------------------------------------------------
    2. CollectionService (5 RPCs)
    -----------------------------------------------------------------------------
    Purpose: Qdrant collection lifecycle and alias management.
    Note: ListCollections removed - MCP queries Qdrant directly.

    """

    def CreateCollection(self, request, context):
        """Create collection with proper configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Delete collection and all its data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollectionAlias(self, request, context):
        """Create collection alias (for tenant_id changes)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollectionAlias(self, request, context):
        """Delete collection alias
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameCollectionAlias(self, request, context):
        """Atomically rename alias (safer than delete + create)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=workspace__daemon__pb2.CreateCollectionRequest.FromString,
                    response_serializer=workspace__daemon__pb2.CreateCollectionResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=workspace__daemon__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateCollectionAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollectionAlias,
                    request_deserializer=workspace__daemon__pb2.CreateAliasRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DeleteCollectionAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollectionAlias,
                    request_deserializer=workspace__daemon__pb2.DeleteAliasRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RenameCollectionAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameCollectionAlias,
                    request_deserializer=workspace__daemon__pb2.RenameAliasRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workspace_daemon.CollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workspace_daemon.CollectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionService(object):
    """-----------------------------------------------------------------------------
    2. CollectionService (5 RPCs)
    -----------------------------------------------------------------------------
    Purpose: Qdrant collection lifecycle and alias management.
    Note: ListCollections removed - MCP queries Qdrant directly.

    """

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.CollectionService/CreateCollection',
            workspace__daemon__pb2.CreateCollectionRequest.SerializeToString,
            workspace__daemon__pb2.CreateCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.CollectionService/DeleteCollection',
            workspace__daemon__pb2.DeleteCollectionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCollectionAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.CollectionService/CreateCollectionAlias',
            workspace__daemon__pb2.CreateAliasRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollectionAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.CollectionService/DeleteCollectionAlias',
            workspace__daemon__pb2.DeleteAliasRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RenameCollectionAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.CollectionService/RenameCollectionAlias',
            workspace__daemon__pb2.RenameAliasRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DocumentServiceStub(object):
    """-----------------------------------------------------------------------------
    3. DocumentService (3 RPCs)
    -----------------------------------------------------------------------------
    Purpose: Direct text ingestion (not file-based).
    Use case: Content not from files - user input, chat snippets, scraped web
    content, manual notes.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IngestText = channel.unary_unary(
                '/workspace_daemon.DocumentService/IngestText',
                request_serializer=workspace__daemon__pb2.IngestTextRequest.SerializeToString,
                response_deserializer=workspace__daemon__pb2.IngestTextResponse.FromString,
                _registered_method=True)
        self.UpdateText = channel.unary_unary(
                '/workspace_daemon.DocumentService/UpdateText',
                request_serializer=workspace__daemon__pb2.UpdateTextRequest.SerializeToString,
                response_deserializer=workspace__daemon__pb2.UpdateTextResponse.FromString,
                _registered_method=True)
        self.DeleteText = channel.unary_unary(
                '/workspace_daemon.DocumentService/DeleteText',
                request_serializer=workspace__daemon__pb2.DeleteTextRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class DocumentServiceServicer(object):
    """-----------------------------------------------------------------------------
    3. DocumentService (3 RPCs)
    -----------------------------------------------------------------------------
    Purpose: Direct text ingestion (not file-based).
    Use case: Content not from files - user input, chat snippets, scraped web
    content, manual notes.

    """

    def IngestText(self, request, context):
        """Ingest text content directly (synchronous)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateText(self, request, context):
        """Update previously ingested text
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteText(self, request, context):
        """Delete ingested text document
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IngestText': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestText,
                    request_deserializer=workspace__daemon__pb2.IngestTextRequest.FromString,
                    response_serializer=workspace__daemon__pb2.IngestTextResponse.SerializeToString,
            ),
            'UpdateText': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateText,
                    request_deserializer=workspace__daemon__pb2.UpdateTextRequest.FromString,
                    response_serializer=workspace__daemon__pb2.UpdateTextResponse.SerializeToString,
            ),
            'DeleteText': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteText,
                    request_deserializer=workspace__daemon__pb2.DeleteTextRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'workspace_daemon.DocumentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('workspace_daemon.DocumentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DocumentService(object):
    """-----------------------------------------------------------------------------
    3. DocumentService (3 RPCs)
    -----------------------------------------------------------------------------
    Purpose: Direct text ingestion (not file-based).
    Use case: Content not from files - user input, chat snippets, scraped web
    content, manual notes.

    """

    @staticmethod
    def IngestText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.DocumentService/IngestText',
            workspace__daemon__pb2.IngestTextRequest.SerializeToString,
            workspace__daemon__pb2.IngestTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.DocumentService/UpdateText',
            workspace__daemon__pb2.UpdateTextRequest.SerializeToString,
            workspace__daemon__pb2.UpdateTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/workspace_daemon.DocumentService/DeleteText',
            workspace__daemon__pb2.DeleteTextRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

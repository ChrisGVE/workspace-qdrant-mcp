[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "workspace-qdrant-mcp"
version = "0.2.1dev0"
description = "Project-scoped Qdrant MCP server with scratchbook functionality"
authors = [
  { name = "Christian C. Berclaz", email = "christian.berclaz@mac.com" },
]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
dependencies = [
  "fastmcp>=0.3.0",
  "qdrant-client>=1.7.0",
  "fastembed>=0.2.0",
  "GitPython>=3.1.0",
  "pydantic>=2.0.0",
  "pydantic-settings>=2.0.0",
  "python-dotenv>=1.0.0",
  "typer>=0.9.0",
  "PyYAML>=6.0.0",
  "rich>=13.0.0",
  "chardet>=5.0.0",
  "pypdf>=4.0.0",
  "psutil>=5.8.0",
  "tqdm>=4.67.1",
  "grpcio>=1.60.0",
  "grpcio-tools>=1.60.0",
  "watchfiles>=0.21.0",
  "fastapi>=0.104.0",
  "uvicorn>=0.24.0",
  "jinja2>=3.1.0",
  "python-multipart>=0.0.6",
  # Document parsers for extended file type support
  "python-docx>=1.1.0", # DOCX documents
  "python-pptx>=0.6.23", # PPTX presentations
  "ebooklib>=0.18", # EPUB ebooks
  "python-magic>=0.4.27", # File type detection
  "beautifulsoup4>=4.12.0", # HTML parsing
  "lxml>=4.9.0", # XML/HTML processing
  "markdown>=3.5.0", # Enhanced markdown support
  "pygments>=2.16.0", # Code syntax highlighting
  "structlog>=23.0.0", # Structured logging support
  # Web crawling and security
  "aiohttp>=3.9.0", # Async HTTP client for web crawling
  "aiofiles>=23.0.0", # Async file operations
  "maturin>=1.9.4",
  # Configuration management
  "toml>=0.10.0",
  "watchdog>=3.0.0",
  "fuzzywuzzy>=0.18.0",
  "python-levenshtein>=0.20.0",  # Optional but recommended for fuzzywuzzy performance
]

[project.optional-dependencies]
dev = [
  "pytest>=7.0.0",
  "pytest-asyncio>=0.21.0",
  "pytest-mock>=3.11.0",
  "pytest-cov>=4.1.0",
  "pytest-xdist>=3.3.0",
  "pytest-timeout>=2.1.0",
  "pytest-benchmark>=4.0.0",
  "testcontainers>=3.7.0",
  "httpx>=0.24.0",
  "respx>=0.20.0",
  "black>=23.0.0",
  "ruff>=0.1.0",
  "mypy>=1.0.0",
  "pydocstyle>=6.0.0",
  "docstring-parser>=0.15",
  "scikit-learn>=1.0.0",
  "rank-bm25>=0.2.2",
  "nltk>=3.8.1",
  # Web UI testing
  "playwright>=1.40.0",
  "pytest-playwright>=0.4.0",
  # Type stubs for mypy
  "types-PyYAML>=6.0.0",
  "types-Markdown>=3.4.0",
  "types-psutil>=5.8.0",
]
full = ["markdown>=3.4.0", "PyYAML>=6.0.0", "pypdf>=4.0.0"]

[project.scripts]
workspace-qdrant-mcp = "workspace_qdrant_mcp.server:main"
wqm = "wqm_cli.cli_wrapper:main"

[project.urls]
Homepage = "https://github.com/ChrisGVE/workspace-qdrant-mcp"
Repository = "https://github.com/ChrisGVE/workspace-qdrant-mcp"
Issues = "https://github.com/ChrisGVE/workspace-qdrant-mcp/issues"
Changelog = "https://github.com/ChrisGVE/workspace-qdrant-mcp/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "workspace_qdrant_mcp/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["workspace_qdrant_mcp", "wqm_cli", "common"]

[tool.black]
line-length = 88
target-version = ["py310"]

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "W", "B", "I", "N", "UP"]
ignore = [
  "E501",    # Line too long - let formatter handle this
  "S101",    # Use of assert detected - acceptable in tests
  "S110",    # try-except-pass - sometimes necessary
  "C901",    # Function too complex - diagnostics function is inherently complex
  "PLR0913", # Too many arguments - sometimes necessary
  "PLR0915", # Too many statements - sometimes necessary  
  "PLC0415", # Import should be at top level - sometimes imports need to be conditional
  "E722",    # Bare except - sometimes necessary for diagnostics
  "B023",    # Function definition does not bind loop variable - acceptable in tests/async code
  "B008",    # Do not perform function calls in argument defaults - common typer pattern
  "E741",    # Ambiguous variable name - sometimes acceptable in short contexts
  "F401",    # Imported but unused - sometimes imports are for availability checking
  "F821",    # Undefined name - may be false positive in test contexts
]

[tool.mypy]
python_version = "3.10"
strict = false
warn_return_any = false
warn_unused_configs = true
ignore_missing_imports = true
no_implicit_optional = false
allow_untyped_defs = true
allow_incomplete_defs = true
exclude = [".venv/", "build/", "dist/"]

[tool.pydocstyle]
# Focus on critical documentation issues only
convention = "pep257"
add-ignore = [
    "D202",  # No blank lines allowed after function docstring - too strict for existing code
    "D204",  # 1 blank line required after class docstring - we fixed the main ones  
    "D401",  # First line should be in imperative mood - too strict for factory functions
    "D107",  # Missing docstring in __init__ - not critical for internal classes
    "D105",  # Missing docstring in magic method - not critical
    "D102",  # Missing docstring in public method - focus on classes and functions first
    "D400",  # First line should end with a period - minor formatting issue
    "D205",  # 1 blank line required between summary line and description - formatting
]
# Only check critical violations that indicate missing or broken documentation
match-dir = "."
ignore-decorators = "property"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
pythonpath = ["."]
addopts = "-v --tb=short --cov=. --cov-report=term-missing --cov-report=html --cov-report=xml --cov-fail-under=80 --cov-branch"
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "e2e: End-to-end tests",
  "slow: Slow running tests",
  "performance: Performance and benchmark tests",
  "requires_qdrant: Tests requiring Qdrant server",
  "requires_git: Tests requiring Git repository",
  "regression: Regression tests for bug fixes",
  "smoke: Smoke tests for basic functionality",
]
timeout = 300
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
  "ignore::UserWarning:testcontainers",
]

[tool.coverage.run]
source = ["."]
omit = [
  "*/tests/*",
  "*/__init__.py", 
  "*/conftest.py",
  "*/test_*.py",
  "wqm_cli/cli/test_*.py",
  "workspace_qdrant_mcp/tools/test_*.py"
]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 2
sort = "Cover"
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError", 
  "if 0:",
  "if __name__ == .__main__.:",
  "pass",
  "@abstract",
  "@abstractmethod",
  "@pytest.fixture",
  "# pragma: no cover",
  "except ImportError:",
  "except ModuleNotFoundError:",
]
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"
skip_covered = false
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[dependency-groups]
dev = [
    "bandit>=1.8.6",
    "nltk>=3.9.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-timeout>=2.4.0",
    "pytest-benchmark>=4.0.0",
    "testcontainers>=3.7.0",
    "rank-bm25>=0.2.2",
    "rich>=14.1.0",
    "scikit-learn>=1.7.1",
    "typer>=0.16.1",
]

# Maturin configuration for Rust integration
[tool.maturin]
module-name = "common._rust_engine"
manifest-path = "rust-engine/daemon/python-bindings/Cargo.toml"
python-source = "."

# Platform-specific optimizations
[tool.maturin.target.x86_64-apple-darwin]
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.aarch64-apple-darwin]
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.x86_64-unknown-linux-gnu]
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.x86_64-pc-windows-msvc]
rustflags = ["-C", "target-cpu=native"]

[tool.maturin.target.aarch64-pc-windows-msvc]
rustflags = ["-C", "target-cpu=native"]

# cibuildwheel configuration for cross-platform wheel building
[tool.cibuildwheel]
# Build for Python 3.10+ on all platforms
build = "cp310-* cp311-* cp312-*"
skip = [
    "*-musllinux_i686",     # Skip 32-bit musl
    "pp*",                  # Skip PyPy
]

# Platform-specific settings
[tool.cibuildwheel.linux]
before-all = [
    "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y",
    "source $HOME/.cargo/env",
    "rustup target add aarch64-unknown-linux-gnu",
    "apt-get update",
    "apt-get install -y protobuf-compiler gcc-aarch64-linux-gnu g++-aarch64-linux-gnu"
]
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
before-all = [
    "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y",
    "source $HOME/.cargo/env", 
    "rustup target add aarch64-apple-darwin",
    "brew install protobuf"
]
# Set deployment target for broader compatibility
environment = { MACOSX_DEPLOYMENT_TARGET = "10.12" }

[tool.cibuildwheel.windows]
before-all = [
    "curl --proto '=https' --tlsv1.2 -sSf https://win.rustup.rs/x86_64 --output rustup-init.exe",
    "rustup-init.exe -y --default-host x86_64-pc-windows-msvc",
    "rustup target add aarch64-pc-windows-msvc",
    "choco install protoc"
]

# Test command to verify wheels work
test-command = "python -c 'import workspace_qdrant_mcp; print(\"Import successful\")'"

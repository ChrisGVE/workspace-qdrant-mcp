warning: unused import: `warn`
  --> src/main.rs:10:21
   |
10 | use tracing::{info, warn};
   |                     ^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `error`
  --> src/grpc/services/document_processor.rs:12:22
   |
12 | use tracing::{debug, error, info};
   |                      ^^^^^

warning: unused imports: `error` and `info`
  --> src/grpc/services/search_service.rs:14:22
   |
14 | use tracing::{debug, error, info};
   |                      ^^^^^  ^^^^

warning: unused import: `error`
  --> src/grpc/services/memory_service.rs:16:22
   |
16 | use tracing::{debug, error, info};
   |                      ^^^^^

warning: unused import: `error`
  --> src/grpc/services/system_service.rs:12:22
   |
12 | use tracing::{debug, error, info};
   |                      ^^^^^

warning: unused import: `server::GrpcServer`
 --> src/grpc/mod.rs:7:9
  |
7 | pub use server::GrpcServer;
  |         ^^^^^^^^^^^^^^^^^^

warning: unused import: `debug`
 --> src/daemon/core.rs:4:21
  |
4 | use tracing::{info, debug};
  |                     ^^^^^

warning: unused import: `DaemonError`
 --> src/daemon/state.rs:4:20
  |
4 | use crate::error::{DaemonError, DaemonResult};
  |                    ^^^^^^^^^^^

warning: unused import: `Row`
 --> src/daemon/state.rs:5:24
  |
5 | use sqlx::{SqlitePool, Row};
  |                        ^^^

warning: unused import: `std::collections::HashMap`
 --> src/daemon/state.rs:6:5
  |
6 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `DaemonError`
 --> src/daemon/watcher.rs:5:20
  |
5 | use crate::error::{DaemonError, DaemonResult};
  |                    ^^^^^^^^^^^

warning: unused imports: `Event` and `RecursiveMode`
 --> src/daemon/watcher.rs:6:43
  |
6 | use notify::{Watcher, RecommendedWatcher, RecursiveMode, Event};
  |                                           ^^^^^^^^^^^^^  ^^^^^

warning: unused import: `mpsc`
 --> src/daemon/watcher.rs:9:19
  |
9 | use tokio::sync::{mpsc, Mutex};
  |                   ^^^^

warning: unused imports: `debug`, `error`, and `warn`
  --> src/daemon/watcher.rs:10:21
   |
10 | use tracing::{info, debug, warn, error};
   |                     ^^^^^  ^^^^  ^^^^^

warning: unused import: `DaemonError`
 --> src/daemon/mod.rs:9:20
  |
9 | use crate::error::{DaemonError, DaemonResult};
  |                    ^^^^^^^^^^^

warning: unused import: `warn`
  --> src/daemon/mod.rs:12:21
   |
12 | use tracing::{info, warn};
   |                     ^^^^

warning: unused variable: `interceptor`
   --> src/grpc/server.rs:121:13
    |
121 |         let interceptor = ConnectionInterceptor::new(Arc::clone(&self.connection_manager));
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_interceptor`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `Watcher`
 --> src/daemon/watcher.rs:6:14
  |
6 | use notify::{Watcher, RecommendedWatcher, RecursiveMode, Event};
  |              ^^^^^^^

warning: methods `get_connection_stats` and `connection_manager` are never used
   --> src/grpc/server.rs:150:12
    |
33  | impl GrpcServer {
    | --------------- methods in this implementation
...
150 |     pub fn get_connection_stats(&self) -> crate::grpc::middleware::ConnectionStats {
    |            ^^^^^^^^^^^^^^^^^^^^
...
155 |     pub fn connection_manager(&self) -> &Arc<ConnectionManager> {
    |            ^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `daemon` is never read
  --> src/grpc/services/document_processor.rs:17:5
   |
16 | pub struct DocumentProcessorImpl {
   |            --------------------- field in this struct
17 |     daemon: Arc<WorkspaceDaemon>,
   |     ^^^^^^
   |
   = note: `DocumentProcessorImpl` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `daemon` is never read
  --> src/grpc/services/search_service.rs:19:5
   |
18 | pub struct SearchServiceImpl {
   |            ----------------- field in this struct
19 |     daemon: Arc<WorkspaceDaemon>,
   |     ^^^^^^
   |
   = note: `SearchServiceImpl` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `daemon` is never read
  --> src/grpc/services/memory_service.rs:21:5
   |
20 | pub struct MemoryServiceImpl {
   |            ----------------- field in this struct
21 |     daemon: Arc<WorkspaceDaemon>,
   |     ^^^^^^
   |
   = note: `MemoryServiceImpl` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `max_connections` is never read
  --> src/grpc/middleware.rs:18:5
   |
13 | pub struct ConnectionManager {
   |            ----------------- field in this struct
...
18 |     max_connections: u64,
   |     ^^^^^^^^^^^^^^^
   |
   = note: `ConnectionManager` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `requests_per_second` and `last_cleanup` are never read
  --> src/grpc/middleware.rs:53:5
   |
51 | pub struct RateLimiter {
   |            ----------- fields in this struct
52 |     /// Requests per second limit per client
53 |     requests_per_second: u32,
   |     ^^^^^^^^^^^^^^^^^^^
...
59 |     last_cleanup: Instant,
   |     ^^^^^^^^^^^^
   |
   = note: `RateLimiter` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: methods `register_connection`, `check_rate_limit`, `update_activity`, `get_stats`, and `cleanup_rate_limiter` are never used
   --> src/grpc/middleware.rs:77:12
    |
62  | impl ConnectionManager {
    | ---------------------- methods in this implementation
...
77  |     pub fn register_connection(&self, client_id: String) -> Result<(), Status> {
    |            ^^^^^^^^^^^^^^^^^^^
...
113 |     pub fn check_rate_limit(&self, client_id: &str) -> Result<(), Status> {
    |            ^^^^^^^^^^^^^^^^
...
146 |     pub fn update_activity(&self, client_id: &str, bytes_sent: u64, bytes_received: u64) {
    |            ^^^^^^^^^^^^^^^
...
156 |     pub fn get_stats(&self) -> ConnectionStats {
    |            ^^^^^^^^^
...
197 |     fn cleanup_rate_limiter(&self, rate_limiter: &mut RateLimiter, now: Instant) {
    |        ^^^^^^^^^^^^^^^^^^^^

warning: struct `ConnectionStats` is never constructed
   --> src/grpc/middleware.rs:209:12
    |
209 | pub struct ConnectionStats {
    |            ^^^^^^^^^^^^^^^

warning: struct `ConnectionPool` is never constructed
   --> src/grpc/middleware.rs:218:12
    |
218 | pub struct ConnectionPool<T: deadpool::managed::Manager> {
    |            ^^^^^^^^^^^^^^

warning: struct `PoolConfig` is never constructed
   --> src/grpc/middleware.rs:232:12
    |
232 | pub struct PoolConfig {
    |            ^^^^^^^^^^

warning: field `connection_manager` is never read
   --> src/grpc/middleware.rs:255:5
    |
254 | pub struct ConnectionInterceptor {
    |            --------------------- field in this struct
255 |     connection_manager: Arc<ConnectionManager>,
    |     ^^^^^^^^^^^^^^^^^^
    |
    = note: `ConnectionInterceptor` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: methods `intercept` and `intercept_response` are never used
   --> src/grpc/middleware.rs:264:12
    |
258 | impl ConnectionInterceptor {
    | -------------------------- methods in this implementation
...
264 |     pub fn intercept<T>(&self, request: Request<T>) -> Result<Request<T>, Status> {
    |            ^^^^^^^^^
...
284 |     pub fn intercept_response<T>(&self, response: Response<T>, client_id: &str) -> Response<T> {
    |            ^^^^^^^^^^^^^^^^^^

warning: struct `RetryConfig` is never constructed
   --> src/grpc/middleware.rs:295:12
    |
295 | pub struct RetryConfig {
    |            ^^^^^^^^^^^

warning: function `with_retry` is never used
   --> src/grpc/middleware.rs:314:14
    |
314 | pub async fn with_retry<F, T, E>(
    |              ^^^^^^^^^^

warning: fields `state` and `processing` are never read
  --> src/daemon/mod.rs:18:5
   |
16 | pub struct WorkspaceDaemon {
   |            --------------- fields in this struct
17 |     config: DaemonConfig,
18 |     state: Arc<RwLock<state::DaemonState>>,
   |     ^^^^^
19 |     processing: Arc<processing::DocumentProcessor>,
   |     ^^^^^^^^^^
   |
   = note: `WorkspaceDaemon` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: methods `stop`, `state`, `state_mut`, `processor`, and `watcher` are never used
   --> src/daemon/mod.rs:73:18
    |
23  | impl WorkspaceDaemon {
    | -------------------- methods in this implementation
...
73  |     pub async fn stop(&mut self) -> DaemonResult<()> {
    |                  ^^^^
...
92  |     pub async fn state(&self) -> tokio::sync::RwLockReadGuard<state::DaemonState> {
    |                  ^^^^^
...
97  |     pub async fn state_mut(&self) -> tokio::sync::RwLockWriteGuard<state::DaemonState> {
    |                  ^^^^^^^^^
...
102 |     pub fn processor(&self) -> &Arc<processing::DocumentProcessor> {
    |            ^^^^^^^^^
...
107 |     pub fn watcher(&self) -> Option<&Arc<watcher::FileWatcher>> {
    |            ^^^^^^^

warning: field `qdrant_config` is never read
  --> src/daemon/processing.rs:13:5
   |
11 | pub struct DocumentProcessor {
   |            ----------------- field in this struct
12 |     config: ProcessingConfig,
13 |     qdrant_config: QdrantConfig,
   |     ^^^^^^^^^^^^^
   |
   = note: `DocumentProcessor` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: fields `processor` and `watcher` are never read
  --> src/daemon/watcher.rs:16:5
   |
14 | pub struct FileWatcher {
   |            ----------- fields in this struct
15 |     config: FileWatcherConfig,
16 |     processor: Arc<DocumentProcessor>,
   |     ^^^^^^^^^
17 |     watcher: Arc<Mutex<Option<RecommendedWatcher>>>,
   |     ^^^^^^^
   |
   = note: `FileWatcher` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: methods `stop`, `watch_directory`, and `unwatch_directory` are never used
  --> src/daemon/watcher.rs:48:18
   |
20 | impl FileWatcher {
   | ---------------- methods in this implementation
...
48 |     pub async fn stop(&self) -> DaemonResult<()> {
   |                  ^^^^
...
57 |     pub async fn watch_directory<P: AsRef<Path>>(&mut self, path: P) -> DaemonResult<()> {
   |                  ^^^^^^^^^^^^^^^
...
67 |     pub async fn unwatch_directory<P: AsRef<Path>>(&mut self, path: P) -> DaemonResult<()> {
   |                  ^^^^^^^^^^^^^^^^^

warning: hiding a lifetime that's elided elsewhere is confusing
  --> src/daemon/mod.rs:92:24
   |
92 |     pub async fn state(&self) -> tokio::sync::RwLockReadGuard<state::DaemonState> {
   |                        ^^^^^     ------------------------------------------------ the same lifetime is hidden here
   |                        |
   |                        the lifetime is elided here
   |
   = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
   = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default
help: use `'_` for type paths
   |
92 |     pub async fn state(&self) -> tokio::sync::RwLockReadGuard<'_, state::DaemonState> {
   |                                                               +++

warning: hiding a lifetime that's elided elsewhere is confusing
  --> src/daemon/mod.rs:97:28
   |
97 |     pub async fn state_mut(&self) -> tokio::sync::RwLockWriteGuard<state::DaemonState> {
   |                            ^^^^^     ------------------------------------------------- the same lifetime is hidden here
   |                            |
   |                            the lifetime is elided here
   |
   = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
   |
97 |     pub async fn state_mut(&self) -> tokio::sync::RwLockWriteGuard<'_, state::DaemonState> {
   |                                                                    +++

warning: `workspace-qdrant-daemon` (bin "workspace-qdrant-daemon" test) generated 39 warnings (run `cargo fix --bin "workspace-qdrant-daemon" --tests` to apply 16 suggestions)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.43s
     Running unittests src/main.rs (target/debug/deps/workspace_qdrant_daemon-d6e88b85d07c1071)

running 58 tests
test config::tests::test_config_structs_are_send_sync ... ok
test config::tests::test_collection_config_standalone ... ok
test config::tests::test_daemon_config_default ... ok
test config::tests::test_env_port_parsing_error ... ok
test config::tests::test_from_env ... ok
test config::tests::test_daemon_config_debug_clone ... ok
test config::tests::test_load_config_nonexistent_file ... ok
test config::tests::test_load_config_no_file ... ok
test config::tests::test_validate_config_empty_database_path ... ok
test config::tests::test_validate_config_empty_qdrant_url ... ok
test config::tests::test_validate_config_invalid_port ... ok
test config::tests::test_validate_config_valid ... ok
test config::tests::test_validate_config_zero_chunk_size ... ok
test daemon::core::tests::test_daemon_core_is_unit_struct ... ok
test daemon::core::tests::test_daemon_core_new ... ok
test daemon::core::tests::test_get_system_info ... ok
test config::tests::test_config_with_serde_defaults ... ok
test daemon::core::tests::test_get_total_memory ... ok
test daemon::core::tests::test_system_info_clone ... ok
test daemon::core::tests::test_system_info_debug ... ok
test config::tests::test_load_config_invalid_file ... ok
test daemon::processing::tests::test_config_access ... ok
test daemon::processing::tests::test_document_processor_new ... ok
test config::tests::test_load_config_from_file ... ok
test daemon::processing::tests::test_processor_with_different_configs ... ok
test config::tests::test_serialization_roundtrip ... ok
test config::tests::test_save_config ... ok
test error::tests::test_daemon_error_debug ... ok
test error::tests::test_daemon_error_display ... ok
test error::tests::test_all_error_variants_are_testable ... ok
test error::tests::test_daemon_error_from_io_error ... ok
test error::tests::test_daemon_error_from_serde_json_error ... ok
test error::tests::test_daemon_result_type ... ok
test error::tests::test_error_chain ... ok
test daemon::state::tests::test_invalid_database_path ... ok
test error::tests::test_error_source_chain ... ok
test error::tests::test_status_conversion_deadline_exceeded ... ok
test error::tests::test_status_conversion_internal_error ... ok
test error::tests::test_status_conversion_invalid_argument ... ok
test error::tests::test_status_conversion_not_found ... ok
test tests::test_args_default_values ... ok
test tests::test_args_debug_format ... ok
test tests::test_args_with_ipv6_address ... ok
test tests::test_args_custom_values ... okHigh-performance Rust daemon for workspace document processing and vector search

Usage: test [OPTIONS]

Options:
  -a, --address <ADDRESS>      gRPC server address [default: 127.0.0.1:50051]
  -c, --config <CONFIG>        Configuration file path
  -l, --log-level <LOG_LEVEL>  Log level [default: info]
      --enable-metrics         Enable metrics collection
  -d, --daemon                 Daemon mode (run in background)
  -h, --help                   Print help
  -V, --version                Print version


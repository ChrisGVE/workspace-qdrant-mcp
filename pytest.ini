[tool:pytest]
# Pytest configuration for comprehensive memory system testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output formatting
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --show-capture=no
    
# Asyncio configuration
asyncio_mode = auto

# Custom markers for test categorization
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    performance: marks tests as performance tests
    crash_recovery: marks tests as crash recovery tests
    concurrent: marks tests as concurrent access tests
    acid: marks tests as ACID transaction tests
    maintenance: marks tests as database maintenance tests
    error_scenarios: marks tests as error scenario tests
    integration: marks tests as integration workflow tests
    unit: marks tests as unit tests
    requires_disk: marks tests that require disk I/O
    requires_multiprocess: marks tests that spawn multiple processes
    # Web UI testing markers
    playwright: marks tests as Playwright browser automation tests
    web_integration: marks tests as web integration tests  
    requires_dev_server: marks tests as requiring development server
    requires_daemon: marks tests as requiring daemon server
    ui_functional: marks tests as UI functional tests
    # Memory system testing markers
    memory_integration: marks tests as memory integration tests
    claude_integration: marks tests as Claude integration tests
    conflict_detection: marks tests as conflict detection tests
    token_optimization: marks tests as token optimization tests
    # Daemon core testing markers
    daemon_unit: marks tests as daemon unit tests
    daemon_lifecycle: marks tests as daemon lifecycle tests
    daemon_config: marks tests as daemon configuration tests
    daemon_monitoring: marks tests as daemon monitoring tests
    queue_unit: marks tests as priority queue unit tests
    queue_processing: marks tests as queue processing tests
    queue_priority: marks tests as priority calculation tests
    file_watching: marks tests as file watching tests
    processing_engine: marks tests as processing engine tests

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Minimum Python version
minversion = 3.10

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:multiprocessing
    ignore::ResourceWarning
    # SQLite specific warnings
    ignore::UserWarning:sqlite3
    # Async warnings
    ignore::RuntimeWarning:asyncio
    # Memory system warnings
    ignore::RuntimeWarning:coroutine

# Test session configuration
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = true
junit_duration_report = total

# Collection configuration
collect_ignore =
    setup.py
    conftest.py
    build
    dist
    .tox
    .env
    .venv
    env
    venv
    htmlcov
    .coverage

# Logging configuration
log_auto_indent = true
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration (when using pytest-cov)
# Integrated with pyproject.toml settings
syntax = "proto3";

package workspace_qdrant_mcp.ingestion;

// Core ingestion service for the Rust processing engine
service IngestionEngine {
    // Engine lifecycle management
    rpc StartEngine(StartEngineRequest) returns (EngineStatus);
    rpc GetEngineStatus(Empty) returns (EngineStatus);
    rpc StopEngine(StopEngineRequest) returns (EngineStatus);
    rpc RestartEngine(RestartEngineRequest) returns (EngineStatus);
    
    // Document processing operations
    rpc IngestDocument(IngestDocumentRequest) returns (stream IngestProgress);
    rpc IngestFolder(IngestFolderRequest) returns (stream IngestProgress);
    rpc ProcessYamlMetadata(ProcessYamlRequest) returns (stream IngestProgress);
    rpc ValidateDocument(ValidateDocumentRequest) returns (ValidationResult);
    
    // File watching and auto-ingestion
    rpc StartWatching(WatchRequest) returns (WatchStatus);
    rpc StopWatching(StopWatchRequest) returns (WatchStatus);
    rpc GetWatchStatus(Empty) returns (WatchStatus);
    rpc PauseWatching(PauseWatchRequest) returns (WatchStatus);
    rpc ResumeWatching(ResumeWatchRequest) returns (WatchStatus);
    
    // LSP integration operations
    rpc GetAvailableLsps(Empty) returns (LspServerList);
    rpc AnalyzeCodeFile(CodeAnalysisRequest) returns (CodeAnalysisResponse);
    rpc StartLspServer(StartLspRequest) returns (LspStatus);
    rpc StopLspServer(StopLspRequest) returns (LspStatus);
    
    // Knowledge graph and relationship extraction
    rpc ExtractRelationships(RelationshipRequest) returns (RelationshipResponse);
    rpc BuildKnowledgeGraph(KnowledgeGraphRequest) returns (stream KnowledgeGraphProgress);
    
    // Collection and metadata operations
    rpc ValidateCollectionName(CollectionNameRequest) returns (CollectionNameValidation);
    rpc GetCollectionStats(CollectionStatsRequest) returns (CollectionStats);
    rpc ListCollections(Empty) returns (CollectionList);
    
    // Health and diagnostics
    rpc GetHealthStatus(Empty) returns (HealthStatus);
    rpc GetDiagnostics(DiagnosticsRequest) returns (DiagnosticsResponse);
    rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
}

// Basic types
message Empty {}

// Engine lifecycle messages
message StartEngineRequest {
    map<string, string> config = 1;
    bool force_restart = 2;
}

message StopEngineRequest {
    bool force_shutdown = 1;
    int32 timeout_seconds = 2;
    bool wait_for_completion = 3;
}

message RestartEngineRequest {
    map<string, string> new_config = 1;
    bool preserve_state = 2;
    int32 timeout_seconds = 3;
}

message EngineStatus {
    enum Status {
        STOPPED = 0;
        STARTING = 1;
        RUNNING = 2;
        STOPPING = 3;
        RESTARTING = 4;
        ERROR = 5;
        DEGRADED = 6;
    }
    
    Status status = 1;
    string message = 2;
    int32 active_tasks = 3;
    int32 queued_tasks = 4;
    int64 uptime_seconds = 5;
    ResourceUsage resource_usage = 6;
    string version = 7;
    int64 startup_time = 8;
    repeated string capabilities = 9;
}

message ResourceUsage {
    double cpu_usage_percent = 1;
    int64 memory_usage_bytes = 2;
    int64 memory_peak_bytes = 3;
    int32 open_files = 4;
    int32 grpc_connections = 5;
    int64 disk_usage_bytes = 6;
    int32 thread_count = 7;
    double load_average = 8;
}

// Document processing messages
message IngestDocumentRequest {
    string file_path = 1;
    string collection = 2;
    map<string, string> metadata = 3;
    ProcessingOptions options = 4;
    bool validate_collection = 5;
}

message IngestFolderRequest {
    string folder_path = 1;
    string collection = 2;
    repeated string file_patterns = 3;
    repeated string ignore_patterns = 4;
    bool recursive = 5;
    ProcessingOptions options = 6;
    int32 max_files = 7;
    bool validate_collection = 8;
}

message ProcessYamlRequest {
    string yaml_path = 1;
    string collection = 2;
    ProcessingOptions options = 3;
    bool validate_metadata = 4;
}

message ValidateDocumentRequest {
    string file_path = 1;
    string collection = 2;
    bool check_duplicates = 3;
    bool validate_format = 4;
}

message ValidationResult {
    bool is_valid = 1;
    repeated string errors = 2;
    repeated string warnings = 3;
    DocumentInfo document_info = 4;
    bool is_duplicate = 5;
    string existing_document_id = 6;
}

message DocumentInfo {
    string file_type = 1;
    int64 file_size = 2;
    string content_hash = 3;
    string detected_language = 4;
    int32 estimated_chunks = 5;
    DocumentMetadata detected_metadata = 6;
}

message ProcessingOptions {
    bool enable_lsp = 1;
    bool force_reprocess = 2;
    int32 chunk_size = 3;
    double chunk_overlap = 4;
    EmbeddingConfig embedding_config = 5;
    bool extract_relationships = 6;
    bool generate_summary = 7;
    int32 max_processing_time_seconds = 8;
    ChunkingStrategy chunking_strategy = 9;
}

message ChunkingStrategy {
    enum Strategy {
        FIXED_SIZE = 0;
        SEMANTIC = 1;
        STRUCTURAL = 2;
        HYBRID = 3;
    }
    
    Strategy strategy = 1;
    map<string, string> parameters = 2;
}

message EmbeddingConfig {
    string model = 1;
    int32 dimensions = 2;
    map<string, string> parameters = 3;
    bool use_local_model = 4;
    string model_path = 5;
}

message IngestProgress {
    enum Stage {
        QUEUED = 0;
        STARTED = 1;
        VALIDATING = 2;
        ANALYZING = 3;
        EXTRACTING = 4;
        LSP_ANALYZING = 5;
        CHUNKING = 6;
        EMBEDDING = 7;
        EXTRACTING_RELATIONSHIPS = 8;
        STORING = 9;
        INDEXING = 10;
        COMPLETED = 11;
        FAILED = 12;
        CANCELLED = 13;
    }
    
    Stage stage = 1;
    double progress_percent = 2;
    string message = 3;
    string current_file = 4;
    DocumentResult result = 5;
    string error = 6;
    int64 elapsed_time_ms = 7;
    int64 estimated_time_remaining_ms = 8;
    ProcessingStats stats = 9;
}

message ProcessingStats {
    int32 files_processed = 1;
    int32 files_failed = 2;
    int32 chunks_created = 3;
    int32 relationships_extracted = 4;
    int64 total_processing_time_ms = 5;
    int64 bytes_processed = 6;
}

message DocumentResult {
    string document_id = 1;
    string collection = 2;
    int32 chunks_created = 3;
    int64 processing_time_ms = 4;
    DocumentMetadata metadata = 5;
    repeated string chunk_ids = 6;
    int32 relationships_extracted = 7;
    string summary = 8;
    DocumentVersion version_info = 9;
}

message DocumentVersion {
    string version = 1;
    string version_type = 2;  // semantic|timestamp|revision|git_tag
    int64 timestamp = 3;
    repeated string supersedes = 4;
    bool is_latest = 5;
    string authority_source = 6;  // git_tag|user_yaml|auto_detected|metadata_extracted
}

// File watching messages
message WatchRequest {
    string path = 1;
    string collection = 2;
    bool auto_ingest = 3;
    repeated string file_patterns = 4;
    repeated string ignore_patterns = 5;
    ProcessingOptions default_options = 6;
    int32 debounce_ms = 7;
    bool recursive = 8;
}

message StopWatchRequest {
    string path = 1;
}

message PauseWatchRequest {
    string path = 1;  // Empty path pauses all watches
}

message ResumeWatchRequest {
    string path = 1;  // Empty path resumes all watches
}

message WatchStatus {
    repeated WatchedPath watched_paths = 1;
    int32 pending_events = 2;
    int64 total_events_processed = 3;
    bool is_paused = 4;
    string status_message = 5;
}

message WatchedPath {
    string path = 1;
    string collection = 2;
    bool auto_ingest = 3;
    bool is_active = 4;
    bool is_paused = 5;
    int64 events_processed = 6;
    int64 last_event_time = 7;
    repeated string file_patterns = 8;
    repeated string ignore_patterns = 9;
    string error = 10;
}

// LSP integration messages
message LspServerList {
    repeated LspServerInfo servers = 1;
}

message LspServerInfo {
    string name = 1;
    string language = 2;
    repeated string file_extensions = 3;
    string command = 4;
    repeated string args = 5;
    bool available = 6;
    bool is_running = 7;
    string version = 8;
    repeated string capabilities = 9;
}

message StartLspRequest {
    string language = 1;
    string workspace_root = 2;
    map<string, string> config = 3;
}

message StopLspRequest {
    string language = 1;
}

message LspStatus {
    string language = 1;
    bool is_running = 2;
    string status = 3;
    string error = 4;
    int64 uptime_seconds = 5;
}

message CodeAnalysisRequest {
    string file_path = 1;
    string content = 2;
    string language = 3;
    bool include_symbols = 4;
    bool include_imports = 5;
    bool include_diagnostics = 6;
    bool include_hover_info = 7;
}

message CodeAnalysisResponse {
    repeated SymbolInfo symbols = 1;
    repeated ImportInfo imports = 2;
    repeated DiagnosticInfo diagnostics = 3;
    string enhanced_content = 4;
    repeated HoverInfo hover_info = 5;
    bool lsp_available = 6;
}

// Knowledge graph and relationship extraction
message RelationshipRequest {
    string document_id = 1;
    string collection = 2;
    repeated string document_ids = 3;  // For batch processing
    RelationshipConfig config = 4;
}

message RelationshipConfig {
    bool extract_entities = 1;
    bool extract_relations = 2;
    bool include_implicit_relations = 3;
    double confidence_threshold = 4;
    repeated string entity_types = 5;
    repeated string relation_types = 6;
}

message RelationshipResponse {
    repeated EntityInfo entities = 1;
    repeated RelationInfo relations = 2;
    int32 processing_time_ms = 3;
    repeated string errors = 4;
}

message EntityInfo {
    string id = 1;
    string name = 2;
    string type = 3;
    double confidence = 4;
    repeated Location locations = 5;
    map<string, string> attributes = 6;
}

message RelationInfo {
    string id = 1;
    string source_entity_id = 2;
    string target_entity_id = 3;
    string relation_type = 4;
    double confidence = 5;
    string description = 6;
    repeated Location locations = 7;
}

message KnowledgeGraphRequest {
    string collection = 1;
    repeated string document_ids = 2;
    KnowledgeGraphConfig config = 3;
}

message KnowledgeGraphConfig {
    bool rebuild_graph = 1;
    bool include_document_relations = 2;
    bool include_entity_relations = 3;
    double min_confidence = 4;
    int32 max_depth = 5;
}

message KnowledgeGraphProgress {
    enum Stage {
        STARTING = 0;
        EXTRACTING_ENTITIES = 1;
        EXTRACTING_RELATIONS = 2;
        BUILDING_GRAPH = 3;
        INDEXING_GRAPH = 4;
        COMPLETED = 5;
        FAILED = 6;
    }
    
    Stage stage = 1;
    double progress_percent = 2;
    string message = 3;
    int32 entities_processed = 4;
    int32 relations_processed = 5;
    string error = 6;
}

// Collection management messages
message CollectionNameRequest {
    string collection_name = 1;
    string operation_type = 2;  // create|access|modify
}

message CollectionNameValidation {
    bool is_valid = 1;
    string error = 2;
    string suggestion = 3;
    CollectionType collection_type = 4;
    bool requires_user_permission = 5;
}

enum CollectionType {
    PROJECT = 0;
    LIBRARY = 1;
    MEMORY = 2;
    ARCHIVE = 3;
    SYSTEM = 4;
}

message CollectionStatsRequest {
    string collection = 1;
    bool include_detailed_stats = 2;
}

message CollectionStats {
    string collection = 1;
    CollectionType collection_type = 2;
    int32 document_count = 3;
    int32 chunk_count = 4;
    int64 total_size_bytes = 5;
    int64 last_updated = 6;
    map<string, int32> document_types = 7;
    map<string, int32> file_extensions = 8;
    int32 entities_count = 9;
    int32 relations_count = 10;
}

message CollectionList {
    repeated CollectionInfo collections = 1;
}

message CollectionInfo {
    string name = 1;
    CollectionType type = 2;
    int32 document_count = 3;
    int64 size_bytes = 4;
    int64 created_time = 5;
    int64 last_updated = 6;
    bool is_readonly = 7;
    repeated string tags = 8;
}

// Health and diagnostics messages
message HealthStatus {
    enum Status {
        HEALTHY = 0;
        DEGRADED = 1;
        UNHEALTHY = 2;
        UNKNOWN = 3;
    }
    
    Status overall_status = 1;
    map<string, ComponentHealth> components = 2;
    repeated string errors = 3;
    repeated string warnings = 4;
    int64 check_time = 5;
}

message ComponentHealth {
    enum Status {
        HEALTHY = 0;
        DEGRADED = 1;
        UNHEALTHY = 2;
        UNKNOWN = 3;
    }
    
    Status status = 1;
    string message = 2;
    map<string, string> details = 3;
    int64 last_check = 4;
}

message DiagnosticsRequest {
    bool include_logs = 1;
    bool include_metrics = 2;
    bool include_config = 3;
    int32 log_lines = 4;
}

message DiagnosticsResponse {
    EngineStatus engine_status = 1;
    repeated string recent_logs = 2;
    map<string, string> configuration = 3;
    repeated string active_watchers = 4;
    repeated string lsp_servers = 5;
    SystemInfo system_info = 6;
}

message SystemInfo {
    string os = 1;
    string arch = 2;
    int32 cpu_cores = 3;
    int64 total_memory = 4;
    string rust_version = 5;
    string build_info = 6;
}

message MetricsRequest {
    int64 start_time = 1;
    int64 end_time = 2;
    repeated string metric_names = 3;
}

message MetricsResponse {
    map<string, MetricData> metrics = 1;
    int64 collection_time = 2;
}

message MetricData {
    string name = 1;
    string type = 2;  // counter|gauge|histogram
    repeated MetricPoint points = 3;
}

message MetricPoint {
    int64 timestamp = 1;
    double value = 2;
    map<string, string> labels = 3;
}

// Document metadata and structure
message DocumentMetadata {
    string title = 1;
    string author = 2;
    string language = 3;
    int64 file_size = 4;
    string content_type = 5;
    int64 created_time = 6;
    int64 modified_time = 7;
    map<string, string> custom_metadata = 8;
    
    // Version information
    DocumentVersion version = 9;
    
    // Code-specific metadata
    repeated SymbolInfo symbols = 10;
    repeated ImportInfo imports = 11;
    
    // Document structure
    repeated SectionInfo sections = 12;
    
    // Extraction metadata
    string extraction_method = 13;
    int64 extraction_time = 14;
    bool requires_ocr = 15;
    string content_hash = 16;
}

message SymbolInfo {
    string name = 1;
    string kind = 2;  // function, class, variable, constant, module, etc.
    string signature = 3;
    string documentation = 4;
    Location location = 5;
    repeated SymbolInfo children = 6;
    string visibility = 7;  // public, private, protected
    repeated string modifiers = 8;  // static, async, const, etc.
    string return_type = 9;
    repeated ParameterInfo parameters = 10;
}

message ParameterInfo {
    string name = 1;
    string type = 2;
    string default_value = 3;
    bool is_optional = 4;
}

message ImportInfo {
    string module = 1;
    repeated string imported_names = 2;
    string alias = 3;
    Location location = 4;
    bool is_wildcard = 5;
    string import_type = 6;  // relative, absolute, etc.
}

message SectionInfo {
    string title = 1;
    int32 level = 2;  // heading level (1-6)
    Location location = 3;
    repeated SectionInfo subsections = 4;
    string content_preview = 5;
}

message DiagnosticInfo {
    string message = 1;
    string severity = 2;  // error, warning, info, hint
    Location location = 3;
    string code = 4;
    string source = 5;  // compiler, linter, etc.
    repeated RelatedInfo related = 6;
}

message RelatedInfo {
    Location location = 1;
    string message = 2;
}

message HoverInfo {
    Location location = 1;
    string content = 2;
    string content_type = 3;  // markdown, plaintext
}

message Location {
    int32 start_line = 1;
    int32 start_column = 2;
    int32 end_line = 3;
    int32 end_column = 4;
    string file_path = 5;
    int32 byte_offset = 6;
    int32 byte_length = 7;
}
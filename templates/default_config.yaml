# =============================================================================
# WORKSPACE-QDRANT-MCP - COMPLETE SYSTEM CONFIGURATION
# =============================================================================
# Version: v2.0
# Date: 2025-09-20
#
# This configuration file contains EVERY configuration option for the complete
# workspace-qdrant-mcp system. Each option is fully documented with:
# - Purpose and behavior
# - Default values and valid ranges
# - Examples and constraints
# - Dependencies and cross-references
# - Platform-specific considerations
# =============================================================================

# =============================================================================
# 1. SYSTEM ARCHITECTURE & CORE SETTINGS
# =============================================================================
system:
  # System identification and versioning
  project_name: "workspace-qdrant-mcp"
  # Valid values: any string identifier for the system
  # Default: "workspace-qdrant-mcp"
  # Purpose: Used for logging, state management, and system identification

  version: "v2.0"
  # Valid values: semantic version string (vX.Y.Z)
  # Default: current system version
  # Purpose: Determines configuration compatibility and migration needs

  # Four-component architecture enablement
  components:
    rust_daemon:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable/disable the heavy processing Rust engine
      # Dependencies: Required for file processing, LSP integration, and watching

    python_mcp_server:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable/disable the intelligent interface layer
      # Dependencies: Required for Claude Code integration and memory management

    cli_utility:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable/disable the wqm CLI utility
      # Dependencies: Can operate independently of other components

    context_injector:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable/disable LLM context injection
      # Dependencies: Requires memory collection for rule injection

# =============================================================================
# 2. MEMORY COLLECTION CONFIGURATION
# =============================================================================
memory:
  # Core memory collection settings
  collection_name: "llm_rules"
  # Valid values: any valid collection name string
  # Default: "llm_rules"
  # Purpose: Global behavioral rules and user preferences storage
  # Note: Configurable collection name for LLM behavioral rules and user preferences

  # Authority levels for memory rules
  authority_levels:
    absolute:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Non-negotiable rules that always apply
      # Examples: "Always make atomic commits", "Never commit secrets"

    default:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Rules that apply unless explicitly overridden
      # Examples: "Use pytest for new projects, unittest for existing"

  # Conversational memory update settings
  conversational_updates:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Allow memory rules to be updated through natural conversation

    auto_conflict_detection: true
    # Valid values: true, false
    # Default: true
    # Purpose: Automatically detect conflicts between new and existing rules
    # Dependencies: Requires Claude/Sonnet API access for semantic analysis

    immediate_activation: true
    # Valid values: true, false
    # Default: true
    # Purpose: Apply memory changes to current session without restart

  # Rule conflict resolution strategies
  conflict_resolution:
    strategy: "merge_conditional"
    # Valid values: "merge_conditional", "replace_existing", "reject_new", "user_prompt"
    # Default: "merge_conditional"
    # Purpose: How to handle conflicts between memory rules
    # Examples:
    #   merge_conditional: Create conditional rules (recommended)
    #   replace_existing: New rule overwrites old rule
    #   reject_new: Keep existing rule, reject new rule
    #   user_prompt: Present options to user for decision

    user_prompt_timeout: "30s"
    # Valid values: 10-300 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: How long to wait for user input during conflict resolution

  # Token management and optimization
  token_management:
    max_tokens: 2000
    # Valid values: 500-8000 tokens
    # Default: 2000
    # Purpose: Maximum tokens for memory rules injection
    # Considerations: Higher values provide more context but consume more tokens

    optimization_enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable automatic token usage optimization

    trim_interactive: true
    # Valid values: true, false
    # Default: true
    # Purpose: Provide interactive trimming when approaching token limits

  # Memory rule scoping
  rule_scope:
    all_sessions: true
    # Valid values: true, false
    # Default: true
    # Purpose: Apply rules across all Claude Code sessions

    project_specific: true
    # Valid values: true, false
    # Default: true
    # Purpose: Allow project-specific memory rules

    temporary_rules: true
    # Valid values: true, false
    # Default: true
    # Purpose: Support temporary rules that expire after session/time

    temporary_rule_duration: "24h"
    # Valid values: 1-168 hours in format "Nh" (e.g., "24h")
    # Default: "24h"
    # Purpose: Default expiration time for temporary rules

  # Session initialization settings
  session_initialization:
    rule_injection_enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Inject memory rules into Claude Code system context on startup

    conflict_detection_on_startup: true
    # Valid values: true, false
    # Default: true
    # Purpose: Check for rule conflicts during session initialization

    startup_timeout: "10s"
    # Valid values: 5-60 seconds in format "Ns" (e.g., "10s")
    # Default: "10s"
    # Purpose: Maximum time to spend on memory initialization

# =============================================================================
# 3. COLLECTION MANAGEMENT & MULTI-TENANCY
# =============================================================================
collections:
  # Project collection naming and creation
  root_name: "project"
  # Valid values: any valid collection name string
  # Default: "project"
  # Purpose: Root name used for multi-tenant project collections
  # Usage: Combined with types to create {root_name}-{type} collections

  types: []
  # Valid values: string or array of strings, empty means no collections created
  # Default: [] (no project collections created by default)
  # Purpose: Collection types to create for projects
  # Examples: ["scratchbook", "docs", "notes"] creates project-scratchbook, project-docs, project-notes
  # Note: If empty or not present, no project collections are automatically created

  # Library collection behavior (NOT CONFIGURABLE - hardcoded)
  # Note: Library collections are created via 'wqm library' commands, not configuration
  # System automatically prefixes library names with "_" to mark them as read-only from MCP
  # Examples: 'wqm library create technical-books' creates "_technical-books" collection
  # UI Display: Users interact with "technical-books" but system stores as "_technical-books"
  # Collision Prevention: Cannot have both "_library" and "library" collections simultaneously

  # Project content collection (for file artifacts)
  project_content:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable multi-tenant project content collection for file artifacts

    name: "project_content"
    # Valid values: any valid collection name string
    # Default: "project_content"
    # Purpose: Base name for the shared, multi-tenant collection containing project artifacts
    # Storage: System automatically creates "_project_content" (read-only from MCP perspective)
    # Content: Non-excluded project files (code, documentation, configuration files)
    # Multi-tenancy: Projects isolated via metadata filtering, not separate collections

  # Reserved naming patterns and validation
  naming:
    reserved_patterns:
      - "${memory.collection_name}"  # Global memory collection (configurable)
      - "_*"                         # Library collection prefix (hardcoded)
      - "__*"                        # System-internal collections (hardcoded)
      # Valid values: array of glob patterns
      # Default: ["${memory.collection_name}", "_*", "__*"]
      # Purpose: Prevent conflicts with system-reserved collection names
      # Note: Memory collection name is configurable, prefixes are hardcoded

    collision_detection: true
    # Valid values: true, false
    # Default: true
    # Purpose: Prevent duplicate collection names at server level
    # Collision Rule: If "_collection_name" exists, "collection_name" cannot be created

    validation_strict: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enforce strict naming rules vs. permissive validation

    prefix_rules:
      underscore_prefix:
        read_only_from_mcp: true
        # Valid values: true (hardcoded, not configurable)
        # Purpose: Collections with "_" prefix are read-only from MCP server perspective
        hidden_prefix_in_ui: true
        # Valid values: true (hardcoded, not configurable)
        # Purpose: UI shows "library" but stores as "_library"
        prevents_collision: true
        # Valid values: true (hardcoded, not configurable)
        # Purpose: Cannot create "library" if "_library" exists

      double_underscore_prefix:
        system_internal: true
        # Valid values: true (hardcoded, not configurable)
        # Purpose: "__" prefix reserved for system-internal collections

  # Multi-tenancy isolation settings
  multi_tenancy:
    isolation_strategy: "metadata_filtering"
    # Valid values: "metadata_filtering", "separate_collections"
    # Default: "metadata_filtering"
    # Purpose: How to isolate projects within collections
    # metadata_filtering: Use metadata to filter within shared collections
    # separate_collections: Create separate collections per project

    cross_project_search: true
    # Valid values: true, false
    # Default: true
    # Purpose: Allow searches across project boundaries when explicitly requested

    tenant_metadata_fields:
      - "project_id"
      - "project_path"
      - "git_repository"
      # Valid values: array of metadata field names
      # Default: ["project_id", "project_path", "git_repository"]
      # Purpose: Metadata fields used for multi-tenant isolation

  # Note: Collection access control is determined by naming conventions (not configurable):
  # - Collections with "_" prefix: Read-only from MCP server, read-write from CLI/daemon
  # - Collections with "__" prefix: System-internal, no MCP access
  # - ${memory.collection_name}: Special exception - read-write from both MCP and CLI
  # - Project collections (${collections.root_name}-{type}): Read-write from MCP server

# =============================================================================
# 4. PROJECT DETECTION & MANAGEMENT
# =============================================================================
project_detection:
  # Git-based project detection (primary method)
  git_detection:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use Git repositories as primary project detection method

    priority: 1
    # Valid values: 1-10 (1 = highest priority)
    # Default: 1
    # Purpose: Priority order for project detection methods

    require_initialized: true
    # Valid values: true, false
    # Default: true
    # Purpose: Require initialized Git repository, not just .git folder

    scan_parent_directories: true
    # Valid values: true, false
    # Default: true
    # Purpose: Scan parent directories to find project root

    max_parent_scan_depth: 10
    # Valid values: 1-50 directory levels
    # Default: 10
    # Purpose: Maximum levels to scan upward for project root

  # GitHub user configuration for submodule handling
  github_integration:
    user: ""
    # Valid values: GitHub username string or empty
    # Default: ""
    # Purpose: GitHub username for submodule ownership detection
    # Usage: Determines which submodules are treated as user-owned projects

    submodule_handling:
      treat_as_independent_projects: true
      # Valid values: true, false
      # Default: true
      # Purpose: Treat user-owned submodules as independent project tenants

      ignore_external_submodules: true
      # Valid values: true, false
      # Default: true
      # Purpose: Ignore submodules not owned by configured GitHub user

      track_ownership_changes: true
      # Valid values: true, false
      # Default: true
      # Purpose: Monitor submodule ownership changes (e.g., forks)

  # Custom project indicators (fallback method)
  custom_indicators:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use custom file patterns to detect projects

    priority: 2
    # Valid values: 1-10 (1 = highest priority)
    # Default: 2
    # Purpose: Priority order for project detection methods

    # Note: Project detection patterns are embedded assets from comprehensive research
    # See: assets/internal_configuration.yaml for complete 500+ project indicator patterns
    # Based on: research/languages/ comprehensive A-Z language ecosystem analysis

    additional_patterns:
      # Optional: Add custom project detection patterns beyond embedded defaults
      # Default: [] (use embedded patterns from assets/internal_configuration.yaml)
      # Purpose: Extend default patterns for custom or proprietary project types
      custom_indicators: []
      # Note: These patterns are embedded at compile-time for performance

  # Project naming and collection creation
  naming:
    root_name_strategy: "directory_name"
    # Valid values: "directory_name", "git_remote_name", "explicit_config"
    # Default: "directory_name"
    # Purpose: How to determine project root name for collection naming

    collection_auto_creation: true
    # Valid values: true, false
    # Default: true
    # Purpose: Automatically create project collections when MCP server starts

    prevent_project_explosion: true
    # Valid values: true, false
    # Default: true
    # Purpose: Prevent uncontrolled creation of project collections
    # Implementation: Check if current folder is part of existing project

# =============================================================================
# 5. LSP INTEGRATION & CODE INTELLIGENCE
# =============================================================================
lsp_integration:
  # Core LSP settings
  enabled: true
  # Valid values: true, false
  # Default: true
  # Purpose: Enable Language Server Protocol integration for code intelligence

  auto_detection: true
  # Valid values: true, false
  # Default: true
  # Purpose: Automatically detect available LSP servers in PATH

  auto_installation: false
  # Valid values: true, false
  # Default: false
  # Purpose: User maintains control over LSP server versions (never auto-install)
  # Philosophy: Respect user autonomy over development environment

  # LSP server selection and configuration
  # Note: LSP server definitions, features, and installation notes are embedded assets
  # See: assets/internal_configuration.yaml and research/languages/ for complete details

  server_override:
    # Optional: Override default LSP server for specific languages
    # Format: language_name: "custom-lsp-server-executable"
    # Default: {} (use embedded defaults from assets/internal_configuration.yaml)
    # Examples:
    # python: "pylsp"          # Override default ruff-lsp
    # javascript: "flow-lsp"   # Override default typescript-language-server
    enabled: false
    overrides: {}

  # Health monitoring and graceful degradation
  health_monitoring:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Monitor LSP server health and performance

    check_interval: "30s"
    # Valid values: 10-300 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: How often to check LSP server health

    automatic_recovery: true
    # Valid values: true, false
    # Default: true
    # Purpose: Automatically restart failed LSP servers

    max_restart_attempts: 3
    # Valid values: 1-10 attempts
    # Default: 3
    # Purpose: Maximum automatic restart attempts before giving up

  # Graceful degradation levels
  degradation:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable graceful degradation when LSP servers fail

    level_1_lsp_crash:
      action: "continue_text_only"
      # Valid values: "continue_text_only", "disable_processing", "retry_immediately"
      # Default: "continue_text_only"
      # Purpose: Continue with text-only processing when LSP crashes
      notify_user: true

    level_2_protocol_errors:
      action: "fallback_basic_symbols"
      # Valid values: "fallback_basic_symbols", "disable_analysis", "queue_for_recovery"
      # Default: "fallback_basic_symbols"
      # Purpose: Fall back to basic symbol extraction on protocol errors
      queue_advanced_analysis: true

    level_3_resource_constraints:
      action: "disable_background_analysis"
      # Valid values: "disable_background_analysis", "reduce_priority", "temporary_shutdown"
      # Default: "disable_background_analysis"
      # Purpose: Disable background analysis under resource pressure
      prioritize_user_queries: true

    level_4_complete_failure:
      action: "maintain_other_functionality"
      # Valid values: "maintain_other_functionality", "shutdown_component", "fallback_mode"
      # Default: "maintain_other_functionality"
      # Purpose: Continue non-LSP functionality when LSP completely fails
      clear_user_communication: true

  # Data collection strategy
  data_collection:
    strategy: "interface_plus_minimal_context"
    # Valid values: "interface_plus_minimal_context", "full_content", "symbols_only"
    # Default: "interface_plus_minimal_context"
    # Purpose: Balance between information richness and storage efficiency

    include_in_vectors:
      - "complete_function_signatures"
      - "class_definitions_with_inheritance"
      - "import_statements_and_dependencies"
      - "documentation_strings_and_comments"
      - "type_annotations_and_signatures"
      - "small_context_snippets"  # 1-3 lines around definitions
      # Valid values: array of content types to include in vector embeddings
      # Purpose: Define what LSP-extracted content gets vectorized

    exclude_from_vectors:
      - "full_method_implementations"  # prevents storage duplication
      - "detailed_implementation_logic"  # available in file content
      - "large_code_blocks"  # rely on file content for details
      # Valid values: array of content types to exclude from vector embeddings
      # Purpose: Prevent duplication and reduce storage requirements

    metadata_extraction:
      symbols:
        - "function_names_and_signatures"
        - "class_definitions_and_inheritance"
        - "variable_declarations_with_types"
        - "module_and_import_structure"
      relationships:
        - "import_dependencies_and_usage"
        - "inheritance_hierarchies"
        - "function_call_graphs"
        - "cross_file_references"
      semantic_information:
        - "type_information_and_annotations"
        - "documentation_and_docstrings"
        - "semantic_token_classification"
        - "syntax_highlighting_metadata"
      # Valid values: arrays of metadata types to extract
      # Purpose: Define structured metadata extraction from LSP analysis

  # Performance settings
  performance:
    symbol_extraction_timeout: "5s"
    # Valid values: 1-30 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: Timeout for symbol extraction per 1000 files

    symbol_lookup_timeout: "100ms"
    # Valid values: 50-1000 milliseconds in format "Nms" (e.g., "100ms")
    # Default: "100ms"
    # Purpose: Timeout for individual symbol definition queries

    incremental_update_timeout: "1s"
    # Valid values: 0.5-10 seconds in format "Ns" (e.g., "1s")
    # Default: "1s"
    # Purpose: Timeout for processing single file changes

    relationship_analysis_timeout: "200ms"
    # Valid values: 100-2000 milliseconds in format "Nms" (e.g., "200ms")
    # Default: "200ms"
    # Purpose: Timeout for dependency graph queries

# =============================================================================
# 6. DOCUMENT PROCESSING & INGESTION
# =============================================================================
document_processing:
  # Supported document types and processing
  supported_types:
    text:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Process plain text files with metadata extraction

      extensions: [".txt", ".md", ".rst", ".asciidoc"]
      # Valid values: array of file extensions
      # Default: [".txt", ".md", ".rst", ".asciidoc"]
      # Purpose: File extensions to treat as text documents

    pdf:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Process PDF files with text extraction

      text_extraction: true
      # Valid values: true, false
      # Default: true
      # Purpose: Extract text from PDF files

      ocr_required_detection: true
      # Valid values: true, false
      # Default: true
      # Purpose: Detect PDFs without text that require OCR

      store_ocr_required_in_state: true
      # Valid values: true, false
      # Default: true
      # Purpose: Store PDFs requiring OCR in state database for user action

    epub_mobi:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Process e-book files with metadata preservation

      metadata_preservation: true
      # Valid values: true, false
      # Default: true
      # Purpose: Preserve e-book metadata during processing

      extract_toc: true
      # Valid values: true, false
      # Default: true
      # Purpose: Extract table of contents from e-books

    code:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Process code files with LSP enhancement or fallback

      lsp_enhanced: true
      # Valid values: true, false
      # Default: true
      # Purpose: Use LSP for enhanced code processing when available

      fallback_to_treesitter: true
      # Valid values: true, false
      # Default: true
      # Purpose: Use tree-sitter for symbol extraction when LSP unavailable

      fallback_to_storage_only: true
      # Valid values: true, false
      # Default: true
      # Purpose: Store code without analysis when neither LSP nor tree-sitter available

    web:
      single_page:
        enabled: true
        # Valid values: true, false
        # Default: true
        # Purpose: Support single webpage scraping

      recursive_crawling:
        enabled: true
        # Valid values: true, false
        # Default: true
        # Purpose: Support recursive web crawling from starting URLs

        max_depth: 3
        # Valid values: 1-10 levels
        # Default: 3
        # Purpose: Maximum recursion depth for web crawling

        rate_limiting:
          requests_per_second: 2
          # Valid values: 0.1-10 requests per second
          # Default: 2
          # Purpose: Rate limit for respectful web crawling

          concurrent_connections: 3
          # Valid values: 1-10 connections
          # Default: 3
          # Purpose: Maximum concurrent connections during crawling

        respect_robots_txt: true
        # Valid values: true, false
        # Default: true
        # Purpose: Respect robots.txt files during crawling

  # Metadata workflow for library collections
  metadata_workflow:
    incomplete_detection: true
    # Valid values: true, false
    # Default: true
    # Purpose: Detect files with incomplete metadata

    yaml_generation: true
    # Valid values: true, false
    # Default: true
    # Purpose: Generate YAML files for metadata completion

    user_completion_cycle: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable user metadata completion workflow

    yaml_update_on_rerun: true
    # Valid values: true, false
    # Default: true
    # Purpose: Update YAML with remaining incomplete files on subsequent runs

    required_metadata_by_type:
      book:
        required: ["title", "author", "edition"]
        optional: ["isbn", "publisher", "draft_status"]
      scientific_article:
        required: ["title", "authors", "journal", "publication_date"]
        optional: ["doi", "volume", "issue", "arxiv_id"]
      webpage:
        required: ["title", "url", "ingestion_date", "content_hash"]
        optional: ["author", "publication_date", "tags"]
      # Valid values: objects defining required and optional metadata fields
      # Purpose: Define metadata requirements for different document types

  # File watching and auto-ingestion
  file_watching:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable automatic file system monitoring

    project_folders:
      auto_monitor: true
      # Valid values: true, false
      # Default: true
      # Purpose: Automatically monitor project folders when MCP server active

      zero_configuration: true
      # Valid values: true, false
      # Default: true
      # Purpose: Require zero user configuration for project monitoring

    library_folders:
      user_configured: true
      # Valid values: true, false
      # Default: true
      # Purpose: Require user configuration for library folder monitoring

      command: "wqm library watch"
      # Valid values: CLI command string
      # Default: "wqm library watch"
      # Purpose: Command used to configure library folder watching

    incremental_updates:
      content_hash_tracking: true
      # Valid values: true, false
      # Default: true
      # Purpose: Track content hashes to detect actual changes

      modification_time_tracking: true
      # Valid values: true, false
      # Default: true
      # Purpose: Track file modification times

      process_only_changes: true
      # Valid values: true, false
      # Default: true
      # Purpose: Process only files that have actually changed

    debouncing:
      lsp_projects: true
      # Valid values: true, false
      # Default: true
      # Purpose: Debounce file changes for projects with LSP integration

      treesitter_only: false
      # Valid values: true, false
      # Default: false
      # Purpose: No debouncing for tree-sitter only projects

      no_analysis: false
      # Valid values: true, false
      # Default: false
      # Purpose: No debouncing when no analysis tools available

      delay: "500ms"
      # Valid values: 100-5000 milliseconds in format "Nms" (e.g., "500ms")
      # Default: "500ms"
      # Purpose: Debounce delay for file change events

    priority_processing:
      order:
        - "mcp_active"
        - "current_project"
        - "background_libraries"
        - "background_projects"
      # Valid values: array of processing priority levels
      # Default: ["mcp_active", "current_project", "background_libraries", "background_projects"]
      # Purpose: Define processing order when multiple sources need attention

# =============================================================================
# 7. SEARCH & INDEXING CONFIGURATION
# =============================================================================
search:
  # Search modes and contexts
  modes:
    project:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Search within current project's collections only
      default_mode: true
      # Valid values: true, false
      # Default: true
      # Purpose: Use as default search mode for active development

    collection:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Search within specific target collection

    global:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Search user-configured global collections

    all:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Comprehensive search across entire workspace
      # Note: Replaces qdrant-retrieve functionality

  # Search performance settings
  performance:
    response_timeout: "100ms"
    # Valid values: 50-1000 milliseconds in format "Nms" (e.g., "100ms")
    # Default: "100ms"
    # Purpose: Maximum time for search responses across all modes

    max_results_per_mode: 50
    # Valid values: 10-500 results
    # Default: 50
    # Purpose: Maximum results returned per search mode

    semantic_similarity_threshold: 0.7
    # Valid values: 0.1-1.0 (similarity score)
    # Default: 0.7
    # Purpose: Minimum similarity score for semantic search results

  # Search features and options
  features:
    include_relationships: true
    # Valid values: true, false
    # Default: true
    # Purpose: Include related content based on semantic relationships

    relationship_max_distance: 0.8
    # Valid values: 0.1-1.0 (similarity score)
    # Default: 0.8
    # Purpose: Maximum semantic distance for relationship inclusion

    version_preference: "latest"
    # Valid values: "latest", "all", "specific"
    # Default: "latest"
    # Purpose: Which document versions to prefer in search results

    include_archived: false
    # Valid values: true, false
    # Default: false
    # Purpose: Include archived collections in search by default

    content_type_filtering:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Allow filtering search results by content type

      available_types:
        - "all"
        - "code"
        - "docs"
        - "books"
        - "web"
        - "notes"
      # Valid values: array of content type identifiers
      # Default: ["all", "code", "docs", "books", "web", "notes"]
      # Purpose: Available content types for search filtering

  # Code-aware search settings
  code_search:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable specialized code search functionality

    symbol_search:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable LSP-enhanced symbol definition and usage search

      include_usage: true
      # Valid values: true, false
      # Default: true
      # Purpose: Include symbol usage locations in search results

      project_scope_default: true
      # Valid values: true, false
      # Default: true
      # Purpose: Default to project scope for symbol searches

    type_signature_search:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable search by function/method type signatures

      return_examples: true
      # Valid values: true, false
      # Default: true
      # Purpose: Return code examples with type signature matches

    related_documentation:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Find documentation related to code elements

      include_external: false
      # Valid values: true, false
      # Default: false
      # Purpose: Include external documentation sources

      max_distance: 0.8
      # Valid values: 0.1-1.0 (similarity score)
      # Default: 0.8
      # Purpose: Maximum semantic distance for related documentation

  # Global collections configuration
  global_collections:
    user_configurable: true
    # Valid values: true, false
    # Default: true
    # Purpose: Allow users to configure global collection list

    default_collections: []
    # Valid values: array of collection names
    # Default: []
    # Purpose: Default global collections (user can override)

    environment_variable: "WQM_GLOBAL_COLLECTIONS"
    # Valid values: environment variable name
    # Default: "WQM_GLOBAL_COLLECTIONS"
    # Purpose: Environment variable for global collection configuration

# =============================================================================
# 8. PERFORMANCE & RESOURCE MANAGEMENT
# =============================================================================
performance:
  # Resource constraints and limits
  memory:
    max_rss: "500MB"
    # Valid values: 100-2000 MB in format "NMB" (e.g., "500MB")
    # Default: "500MB"
    # Purpose: Maximum RSS memory usage for large workspaces (100k+ documents)

    warning_threshold: "400MB"
    # Valid values: 80-1600 MB (80% of max_rss) in format "NMB" (e.g., "400MB")
    # Default: "400MB"
    # Purpose: Memory usage level that triggers warnings

    gc_threshold: "350MB"
    # Valid values: 70-1400 MB (70% of max_rss) in format "NMB" (e.g., "350MB")
    # Default: "350MB"
    # Purpose: Memory usage level that triggers garbage collection

  # Processing performance targets
  processing:
    document_ingestion_rate: 1000
    # Valid values: 100-10000 documents per minute
    # Default: 1000
    # Purpose: Target sustained throughput for document processing (Rust daemon)

    batch_size: 100
    # Valid values: 10-1000 documents
    # Default: 100
    # Purpose: Number of documents to process in each batch

    max_concurrent_operations: 4
    # Valid values: 1-16 operations
    # Default: 4
    # Purpose: Maximum concurrent processing operations

  # Startup and initialization
  startup:
    daemon_init_timeout: "2s"
    # Valid values: 1-10 seconds in format "Ns" (e.g., "2s")
    # Default: "2s"
    # Purpose: Maximum time for Rust daemon initialization and gRPC connection

    mcp_server_init_timeout: "5s"
    # Valid values: 2-30 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: Maximum time for MCP server initialization

    health_check_timeout: "1s"
    # Valid values: 0.5-5 seconds in format "Ns" (e.g., "1s")
    # Default: "1s"
    # Purpose: Timeout for component health checks during startup

  # CPU and priority management
  cpu:
    background_priority: "low"
    # Valid values: "low", "normal", "high"
    # Default: "low"
    # Purpose: CPU priority for background processing operations

    interactive_priority: "high"
    # Valid values: "low", "normal", "high"
    # Default: "high"
    # Purpose: CPU priority when MCP server is active

    priority_boost_on_mcp_active: true
    # Valid values: true, false
    # Default: true
    # Purpose: Boost daemon priority when MCP server becomes active

    revert_priority_on_mcp_quit: true
    # Valid values: true, false
    # Default: true
    # Purpose: Revert to background priority when MCP server quits

  # Recovery and resumption performance
  recovery:
    state_recovery_timeout: "5s"
    # Valid values: 1-30 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: Maximum time to detect and present resumption options

    transaction_rollback_timeout: "1s"
    # Valid values: 0.5-10 seconds in format "Ns" (e.g., "1s")
    # Default: "1s"
    # Purpose: Maximum time for atomic operation rollback on failure

    queue_persistence: true
    # Valid values: true, false
    # Default: true
    # Purpose: 100% preservation of unfinished work across system restarts

    graceful_degradation_response: "500ms"
    # Valid values: 100-2000 milliseconds in format "Nms" (e.g., "500ms")
    # Default: "500ms"
    # Purpose: Maximum time to switch to degraded mode when components fail

    automatic_recovery_timeout: "10s"
    # Valid values: 5-60 seconds in format "Ns" (e.g., "10s")
    # Default: "10s"
    # Purpose: Maximum time to resume full functionality after component restart

  # Scalability targets
  scalability:
    max_collections: 100
    # Valid values: 10-1000 collections
    # Default: 100
    # Purpose: Maximum number of collections supported per workspace

    max_documents_total: 100000
    # Valid values: 1000-1000000 documents
    # Default: 100000
    # Purpose: Maximum total documents across all collections

    max_documents_per_collection: 10000
    # Valid values: 100-100000 documents
    # Default: 10000
    # Purpose: Maximum documents per individual collection

    concurrent_mcp_servers: 3
    # Valid values: 1-10 servers
    # Default: 3
    # Purpose: Maximum concurrent MCP servers supported on same daemon

# =============================================================================
# 9. PLATFORM & DIRECTORY CONFIGURATION
# =============================================================================
platform:
  # OS-standard directory compliance
  xdg_compliance:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Follow XDG Base Directory Specification on Linux/Unix

    fallback_on_windows_mac: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use platform-specific directories on Windows/macOS

  # Platform-specific directory mapping
  directories:
    linux:
      cache: "$XDG_CACHE_HOME/workspace-qdrant-mcp"
      # Default fallback: "~/.cache/workspace-qdrant-mcp"
      state: "$XDG_STATE_HOME/workspace-qdrant-mcp"
      # Default fallback: "~/.local/state/workspace-qdrant-mcp"
      config: "$XDG_CONFIG_HOME/workspace-qdrant-mcp"
      # Default fallback: "~/.config/workspace-qdrant-mcp"
      logs: "$XDG_STATE_HOME/workspace-qdrant-mcp/logs"
      # Default fallback: "~/.local/state/workspace-qdrant-mcp/logs"

    macos:
      cache: "~/Library/Caches/workspace-qdrant-mcp"
      logs: "~/Library/Logs/workspace-qdrant-mcp"
      config: "~/Library/Application Support/workspace-qdrant-mcp"
      state: "~/Library/Application Support/workspace-qdrant-mcp/state"

    windows:
      cache: "%LOCALAPPDATA%\\workspace-qdrant-mcp\\cache"
      logs: "%LOCALAPPDATA%\\workspace-qdrant-mcp\\logs"
      config: "%APPDATA%\\workspace-qdrant-mcp"
      state: "%LOCALAPPDATA%\\workspace-qdrant-mcp\\state"
    # Valid values: platform-specific directory path templates
    # Purpose: Ensure proper directory usage according to OS conventions
    # Note: User-configurable directories removed in favor of OS standards

  # File pattern system (embedded at compile-time)
  file_patterns:
    language_extensions:
      python:
        extensions: [".py", ".pyi", ".pyx"]
        config_files: ["pyproject.toml", "setup.py", "requirements*.txt", "Pipfile"]
      rust:
        extensions: [".rs"]
        config_files: ["Cargo.toml", "Cargo.lock"]
      javascript:
        extensions: [".js", ".mjs", ".cjs"]
        config_files: ["package.json", "package-lock.json"]
      typescript:
        extensions: [".ts", ".tsx", ".d.ts"]
        config_files: ["tsconfig.json", "package.json"]
      # Valid values: objects mapping languages to extensions and config files
      # Purpose: Automatically generated from available LSP servers
      # Note: Embedded at compile-time for performance

    exclusion_patterns:
      # Note: Global exclusion patterns are embedded at compile-time
      # Complete patterns available in: assets/internal_configuration.yaml
      # Includes: version_control, build_outputs, cache_directories, virtual_environments,
      #           ide_files, temporary_files, binary_files, media_files, archive_files
      # Coverage: Research-backed patterns for optimal performance

    include_patterns:
      # Custom include patterns can be added by user
      custom: []
      # Valid values: array of glob patterns
      # Default: []
      # Purpose: User-defined include patterns to supplement defaults

    exclude_patterns:
      # Custom exclude patterns can be added by user
      custom: []
      # Valid values: array of glob patterns
      # Default: []
      # Purpose: User-defined exclude patterns to supplement defaults

# =============================================================================
# 10. CLI BEHAVIOR CONFIGURATION
# =============================================================================
cli:
  # CLI behavior and user experience settings
  behavior:
    interactive_mode: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable interactive features like token optimization, conflict resolution

    default_output_format: "table"
    # Valid values: "table", "json", "yaml", "structured", "plain"
    # Default: "table"
    # Purpose: Default output format for CLI commands

    color_output: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use colored output for better readability

    progress_indicators: true
    # Valid values: true, false
    # Default: true
    # Purpose: Show progress bars and indicators for long operations

    confirmation_prompts: true
    # Valid values: true, false
    # Default: true
    # Purpose: Show confirmation prompts for destructive operations

  # Subcommand availability (enable/disable major command groups)
  subcommands:
    memory_commands: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable/disable memory management command group

    admin_commands: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable/disable system administration command group

    ingest_commands: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable/disable document ingestion command group

    search_commands: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable/disable search interface command group

    library_commands: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable/disable library management command group

    collection_commands: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable/disable collection management command group

  # CLI integration settings
  integration:
    shell_completion: true
    # Valid values: true, false
    # Default: true
    # Purpose: Generate shell completion scripts for bash/zsh/fish

    man_pages: true
    # Valid values: true, false
    # Default: true
    # Purpose: Generate man pages for CLI commands

    help_system: "comprehensive"
    # Valid values: "minimal", "standard", "comprehensive"
    # Default: "comprehensive"
    # Purpose: Level of detail in CLI help system

  # Note: CLI command structure and subcommands are authoritatively defined in Section 7.1
  # This section only contains user-configurable behavior, output preferences, and integration options

# =============================================================================
# 11. gRPC & COMMUNICATION SETTINGS
# =============================================================================
grpc:
  # Core gRPC server settings
  server:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable gRPC server in Rust daemon for MCP communication

    host: "127.0.0.1"
    # Valid values: IP address string
    # Default: "127.0.0.1"
    # Purpose: Host address for gRPC server binding

    port: 50051
    # Valid values: 1024-65535 (port number)
    # Default: 50051
    # Purpose: Port number for gRPC server

    max_concurrent_streams: 100
    # Valid values: 1-1000 streams
    # Default: 100
    # Purpose: Maximum concurrent gRPC streams

    max_message_size: "16MB"
    # Valid values: 1-100 MB in format "NMB" (e.g., "16MB")
    # Default: "16MB"
    # Purpose: Maximum message size for gRPC communication

  # Client settings (for Python MCP server)
  client:
    connection_timeout: "5s"
    # Valid values: 1-30 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: Timeout for initial gRPC connection

    request_timeout: "30s"
    # Valid values: 5-300 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: Default timeout for gRPC requests

    keepalive_interval: "30s"
    # Valid values: 10-300 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: Keep-alive ping interval

    keepalive_timeout: "5s"
    # Valid values: 1-30 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: Keep-alive ping timeout

    max_retry_attempts: 3
    # Valid values: 1-10 attempts
    # Default: 3
    # Purpose: Maximum retry attempts for failed requests

    retry_backoff: "1000ms"
    # Valid values: 100-10000 milliseconds in format "Nms" (e.g., "1000ms")
    # Default: "1000ms"
    # Purpose: Base backoff time for retry attempts

  # Health checking and monitoring
  health:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable gRPC health checking service

    check_interval: "10s"
    # Valid values: 5-60 seconds in format "Ns" (e.g., "10s")
    # Default: "10s"
    # Purpose: Health check interval

    timeout: "2s"
    # Valid values: 1-10 seconds in format "Ns" (e.g., "2s")
    # Default: "2s"
    # Purpose: Health check timeout

  # TLS and security (for future use)
  security:
    tls_enabled: false
    # Valid values: true, false
    # Default: false
    # Purpose: Enable TLS encryption for gRPC communication
    # Note: Currently disabled for local communication

    cert_file: ""
    # Valid values: file path string
    # Default: ""
    # Purpose: Path to TLS certificate file

    key_file: ""
    # Valid values: file path string
    # Default: ""
    # Purpose: Path to TLS private key file

# =============================================================================
# 12. VERSION MANAGEMENT & CONFLICT RESOLUTION
# =============================================================================
version_management:
  # Document type-based versioning strategies
  document_types:
    book:
      primary_version: "edition"
      # Valid values: "edition", "publication_date", "modification_date"
      # Default: "edition"
      # Purpose: Primary version identifier for books

      secondary_version: "publication_date"
      # Valid values: "publication_date", "modification_date", "ingestion_date"
      # Default: "publication_date"
      # Purpose: Secondary version identifier for books

      required_metadata: ["title", "author", "edition"]
      # Valid values: array of required metadata field names
      # Default: ["title", "author", "edition"]
      # Purpose: Metadata fields required for proper versioning

      optional_metadata: ["isbn", "publisher", "draft_status"]
      # Valid values: array of optional metadata field names
      # Default: ["isbn", "publisher", "draft_status"]
      # Purpose: Optional metadata fields that enhance versioning

      retention_policy: "latest_only"
      # Valid values: "latest_only", "all_versions", "archive_older"
      # Default: "latest_only"
      # Purpose: How many versions to retain

    scientific_article:
      primary_version: "publication_date"
      secondary_version: "arxiv_version"
      required_metadata: ["title", "authors", "journal", "publication_date"]
      optional_metadata: ["doi", "volume", "issue", "arxiv_id"]
      retention_policy: "latest_only"

    code_file:
      primary_version: "git_tag"
      secondary_version: "modification_date"
      auto_metadata: true
      # Valid values: true, false
      # Default: true
      # Purpose: Automatically extract metadata from git/filesystem
      retention_policy: "current_state_only"
      # Note: Git handles history, only store current working tree

    webpage:
      primary_version: "ingestion_date"
      secondary_version: "content_hash"
      required_metadata: ["title", "url", "ingestion_date", "content_hash"]
      optional_metadata: ["author", "publication_date", "tags"]
      retention_policy: "latest_with_archive_option"
      # Note: Can optionally archive previous versions

    # Add more document types as needed
    generic:
      primary_version: "modification_date"
      secondary_version: "content_hash"
      required_metadata: ["title", "format"]
      optional_metadata: ["author", "tags", "description"]
      retention_policy: "latest_only"

  # Version conflict resolution strategies
  conflict_resolution:
    same_content_different_editions:
      strategy: "latest_wins_auto"
      # Valid values: "latest_wins_auto", "user_decision", "keep_both"
      # Default: "latest_wins_auto"
      # Purpose: How to handle same content in different editions

      deprioritize_older: true
      # Valid values: true, false
      # Default: true
      # Purpose: Lower search ranking for older versions

    code_files:
      git_tag_precedence: true
      # Valid values: true, false
      # Default: true
      # Purpose: Git tags take precedence over modification dates

      working_tree_only: true
      # Valid values: true, false
      # Default: true
      # Purpose: Only store current working tree state

    format_precedence:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable format-based precedence rules

      create_research_task: true
      # Valid values: true, false
      # Default: true
      # Purpose: Create research tasks for PDF vs EPUB vs MOBI quality analysis

    metadata_conflicts:
      user_responsibility: true
      # Valid values: true, false
      # Default: true
      # Purpose: User validates and resolves metadata conflicts

      engine_override: false
      # Valid values: true, false
      # Default: false
      # Purpose: Engine never overrides user decisions

  # Archive collection settings
  archive_collections:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable optional archive collections for version history

    naming_pattern: "_{collection}_archive"
    # Valid values: string pattern with {collection} placeholder
    # Default: "_{collection}_archive"
    # Purpose: Naming pattern for archive collections

    auto_creation: false
    # Valid values: true, false
    # Default: false
    # Purpose: Automatically create archive collections vs user-initiated

    retention_policy: "user_defined"
    # Valid values: "user_defined", "time_based", "count_based"
    # Default: "user_defined"
    # Purpose: How long to retain archived versions

# =============================================================================
# 13. WEB CRAWLING & EXTERNAL CONTENT
# =============================================================================
web_crawling:
  # Core web crawling settings
  enabled: true
  # Valid values: true, false
  # Default: true
  # Purpose: Enable web crawling and external content ingestion

  # Single page scraping
  single_page:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Support single webpage scraping

    timeout: "30s"
    # Valid values: 5-120 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: Timeout for single page requests

    max_page_size: "10MB"
    # Valid values: 1-100 MB in format "NMB" (e.g., "10MB")
    # Default: "10MB"
    # Purpose: Maximum page size to process

    follow_redirects: true
    # Valid values: true, false
    # Default: true
    # Purpose: Follow HTTP redirects during scraping

    max_redirects: 5
    # Valid values: 1-20 redirects
    # Default: 5
    # Purpose: Maximum number of redirects to follow

  # Recursive crawling settings
  recursive:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Support recursive web crawling from starting URLs

    max_depth: 3
    # Valid values: 1-10 levels
    # Default: 3
    # Purpose: Maximum recursion depth for web crawling

    same_domain_only: true
    # Valid values: true, false
    # Default: true
    # Purpose: Restrict crawling to same domain as starting URL

    max_pages_per_domain: 100
    # Valid values: 10-10000 pages
    # Default: 100
    # Purpose: Maximum pages to crawl per domain

  # Rate limiting and politeness
  rate_limiting:
    requests_per_second: 2
    # Valid values: 0.1-10 requests per second
    # Default: 2
    # Purpose: Rate limit for respectful web crawling

    concurrent_connections: 3
    # Valid values: 1-10 connections
    # Default: 3
    # Purpose: Maximum concurrent connections during crawling

    delay_between_requests: "1000ms"
    # Valid values: 100-10000 milliseconds in format "Nms" (e.g., "1000ms")
    # Default: "1000ms"
    # Purpose: Minimum delay between requests to same domain

    respect_robots_txt: true
    # Valid values: true, false
    # Default: true
    # Purpose: Respect robots.txt files during crawling

    user_agent: "workspace-qdrant-mcp/2.0 (+https://github.com/user/workspace-qdrant-mcp)"
    # Valid values: user agent string
    # Default: "workspace-qdrant-mcp/2.0 (+https://github.com/user/workspace-qdrant-mcp)"
    # Purpose: User agent string for web requests

  # Content extraction and processing
  content_extraction:
    extract_text_only: false
    # Valid values: true, false
    # Default: false
    # Purpose: Extract only text content vs. full page structure

    include_metadata: true
    # Valid values: true, false
    # Default: true
    # Purpose: Extract and store page metadata (title, description, etc.)

    extract_links: true
    # Valid values: true, false
    # Default: true
    # Purpose: Extract and process links for recursive crawling

    filter_content: true
    # Valid values: true, false
    # Default: true
    # Purpose: Filter out navigation, ads, and non-content elements

    min_content_length: 100
    # Valid values: 10-10000 characters
    # Default: 100
    # Purpose: Minimum content length to consider page worthwhile

  # Error handling and retries
  error_handling:
    max_retry_attempts: 3
    # Valid values: 1-10 attempts
    # Default: 3
    # Purpose: Maximum retry attempts for failed requests

    retry_backoff: "5s"
    # Valid values: 1-60 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: Base backoff time for retry attempts

    skip_on_error: true
    # Valid values: true, false
    # Default: true
    # Purpose: Skip problematic pages vs. failing entire crawl

    log_errors: true
    # Valid values: true, false
    # Default: true
    # Purpose: Log crawling errors for user review

# =============================================================================
# 14. GRACEFUL DEGRADATION & RECOVERY
# =============================================================================
graceful_degradation:
  # Core graceful degradation settings
  enabled: true
  # Valid values: true, false
  # Default: true
  # Purpose: Enable graceful degradation when components fail

  # Component failure handling
  component_failures:
    rust_daemon:
      fallback_mode: "mcp_server_only"
      # Valid values: "mcp_server_only", "cli_only", "shutdown_system"
      # Default: "mcp_server_only"
      # Purpose: How to handle Rust daemon failures

      preserve_functionality:
        - "memory_collection_access"
        - "basic_search"
        - "configuration_management"
      # Valid values: array of functionality to preserve
      # Purpose: Core functionality to maintain during daemon failure

      user_notification: true
      # Valid values: true, false
      # Default: true
      # Purpose: Notify user of degraded functionality

    mcp_server:
      fallback_mode: "cli_only"
      # Valid values: "cli_only", "daemon_only", "shutdown_system"
      # Default: "cli_only"
      # Purpose: How to handle MCP server failures

      preserve_functionality:
        - "file_processing"
        - "collection_management"
        - "administrative_tasks"
      # Valid values: array of functionality to preserve
      # Purpose: Core functionality to maintain during MCP server failure

    lsp_servers:
      fallback_mode: "text_only_processing"
      # Valid values: "text_only_processing", "treesitter_fallback", "skip_code_files"
      # Default: "text_only_processing"
      # Purpose: How to handle LSP server failures

      degradation_levels: 4
      # Valid values: 1-10 levels
      # Default: 4
      # Purpose: Number of graceful degradation levels for LSP failures
      # See LSP section for detailed level definitions

  # Automatic recovery settings
  automatic_recovery:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable automatic recovery when failed components restart

    detection_interval: "5s"
    # Valid values: 1-60 seconds in format "Ns" (e.g., "5s")
    # Default: "5s"
    # Purpose: How often to check for component recovery

    recovery_timeout: "10s"
    # Valid values: 5-60 seconds in format "Ns" (e.g., "10s")
    # Default: "10s"
    # Purpose: Maximum time to attempt recovery

    max_recovery_attempts: 3
    # Valid values: 1-10 attempts
    # Default: 3
    # Purpose: Maximum automatic recovery attempts

  # State preservation during failures
  state_preservation:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Ensure no data loss during component failures

    transaction_boundaries: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use SQLite transaction boundaries for atomic operations

    rollback_capability: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable rollback of failed operations

    queue_persistence: true
    # Valid values: true, false
    # Default: true
    # Purpose: Persist operation queues across failures

    checkpoint_interval: "30s"
    # Valid values: 10-300 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: How often to checkpoint system state

  # User communication during degradation
  user_communication:
    clear_messaging: true
    # Valid values: true, false
    # Default: true
    # Purpose: Provide clear communication about degraded functionality

    recovery_progress: true
    # Valid values: true, false
    # Default: true
    # Purpose: Show recovery progress to user

    functionality_status: true
    # Valid values: true, false
    # Default: true
    # Purpose: Clearly indicate which features are available/unavailable

    recovery_instructions: true
    # Valid values: true, false
    # Default: true
    # Purpose: Provide instructions for manual recovery when needed

# =============================================================================
# 15. SECURITY & ACCESS CONTROL
# =============================================================================
security:
  # Access control and permissions
  access_control:
    collection_permissions:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enforce collection-level access permissions

      default_policy: "restrictive"
      # Valid values: "restrictive", "permissive"
      # Default: "restrictive"
      # Purpose: Default access policy for new collections

    api_authentication:
      enabled: false
      # Valid values: true, false
      # Default: false
      # Purpose: Enable API authentication (future feature)
      # Note: Currently disabled for local development

    file_system_access:
      restricted_paths:
        - "/etc"
        - "/sys"
        - "/proc"
        - "C:\\Windows\\System32"
      # Valid values: array of file system paths
      # Default: system-critical directories
      # Purpose: Prevent access to sensitive system directories

      home_directory_only: false
      # Valid values: true, false
      # Default: false
      # Purpose: Restrict file access to user's home directory only

  # Data protection and privacy
  data_protection:
    encrypt_at_rest: false
    # Valid values: true, false
    # Default: false
    # Purpose: Encrypt stored data (future feature)

    sanitize_logs: true
    # Valid values: true, false
    # Default: true
    # Purpose: Remove sensitive information from logs

    secure_temp_files: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use secure temporary file creation

  # Network security
  network_security:
    localhost_only: true
    # Valid values: true, false
    # Default: true
    # Purpose: Bind servers to localhost only

    firewall_friendly: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use standard ports and protocols

  # Content filtering and validation
  content_filtering:
    validate_file_types: true
    # Valid values: true, false
    # Default: true
    # Purpose: Validate file types before processing

    max_file_size: "100MB"
    # Valid values: 1-1000 MB in format "NMB" (e.g., "100MB")
    # Default: "100MB"
    # Purpose: Maximum file size to process

    scan_for_malware: false
    # Valid values: true, false
    # Default: false
    # Purpose: Scan files for malware (requires external tool)

# =============================================================================
# 16. MONITORING & DIAGNOSTICS
# =============================================================================
monitoring:
  # System health monitoring
  health_monitoring:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable comprehensive system health monitoring

    check_interval: "30s"
    # Valid values: 10-300 seconds in format "Ns" (e.g., "30s")
    # Default: "30s"
    # Purpose: How often to perform health checks

    component_checks:
      - "rust_daemon"
      - "mcp_server"
      - "grpc_communication"
      - "sqlite_database"
      - "lsp_servers"
      - "file_system_access"
      # Valid values: array of component names to monitor
      # Purpose: Components to include in health monitoring

  # Performance metrics
  performance_metrics:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Collect and report performance metrics

    metrics_retention: "7d"
    # Valid values: 1-30 days in format "Nd" (e.g., "7d")
    # Default: "7d"
    # Purpose: How long to retain performance metrics

    collected_metrics:
      - "memory_usage"
      - "cpu_usage"
      - "disk_io"
      - "network_io"
      - "processing_throughput"
      - "search_response_times"
      - "error_rates"
      # Valid values: array of metric names
      # Purpose: Performance metrics to collect

  # Logging configuration
  logging:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable system logging

    level: "info"
    # Valid values: "trace", "debug", "info", "warn", "error"
    # Default: "info"
    # Purpose: Minimum log level to record

    file_rotation: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable log file rotation

    max_file_size: "10MB"
    # Valid values: 1-100 MB in format "NMB" (e.g., "10MB")
    # Default: "10MB"
    # Purpose: Maximum size for individual log files

    max_files: 5
    # Valid values: 1-20 files
    # Default: 5
    # Purpose: Maximum number of rotated log files to keep

    structured_logging: true
    # Valid values: true, false
    # Default: true
    # Purpose: Use structured (JSON) log format

  # Error tracking and reporting
  error_tracking:
    enabled: true
    # Valid values: true, false
    # Default: true
    # Purpose: Track and categorize errors

    error_categorization: true
    # Valid values: true, false
    # Default: true
    # Purpose: Automatically categorize errors by type and severity

    error_reporting: "local_only"
    # Valid values: "local_only", "opt_in_telemetry", "disabled"
    # Default: "local_only"
    # Purpose: How to handle error reporting

    crash_dumps: true
    # Valid values: true, false
    # Default: true
    # Purpose: Generate crash dumps for debugging

  # Diagnostics and troubleshooting
  diagnostics:
    self_test_on_startup: true
    # Valid values: true, false
    # Default: true
    # Purpose: Run self-tests during system startup

    diagnostic_commands:
      enabled: true
      # Valid values: true, false
      # Default: true
      # Purpose: Enable diagnostic CLI commands

      include_system_info: true
      # Valid values: true, false
      # Default: true
      # Purpose: Include system information in diagnostics

      include_config_validation: true
      # Valid values: true, false
      # Default: true
      # Purpose: Include configuration validation in diagnostics

    troubleshooting_guides: true
    # Valid values: true, false
    # Default: true
    # Purpose: Include built-in troubleshooting guides

    support_bundle_generation: true
    # Valid values: true, false
    # Default: true
    # Purpose: Enable generation of support bundles for debugging

# =============================================================================
# END OF CONFIGURATION
# =============================================================================
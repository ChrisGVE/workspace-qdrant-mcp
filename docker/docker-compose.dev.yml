# Development Docker Compose for Workspace Qdrant MCP
# Optimized for development with hot reload and debugging tools
version: '3.8'

services:
  # Main application server (development mode)
  workspace-qdrant-mcp:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: workspace-qdrant-mcp:dev
    container_name: workspace-qdrant-mcp-dev
    restart: unless-stopped
    ports:
      - "${WQM_PORT:-8000}:8000"
      - "${WQM_DEBUG_PORT:-5678}:5678"  # Debug port for IDE
    environment:
      # Development configuration
      - WORKSPACE_QDRANT_HOST=0.0.0.0
      - WORKSPACE_QDRANT_PORT=8000
      - WORKSPACE_QDRANT_LOG_LEVEL=DEBUG
      - WORKSPACE_QDRANT_DATA_DIR=/app/data
      - WORKSPACE_QDRANT_LOG_DIR=/app/logs
      - WORKSPACE_QDRANT_ENV=development
      
      # Hot reload
      - PYTHONPATH=/app/src
      - WATCHFILES_FORCE_POLLING=true
      
      # Qdrant connection
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_GRPC_PORT=6334
      
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Development tools
      - PYTEST_CURRENT_TEST=1
      - COVERAGE_PROCESS_START=.coveragerc
      
    volumes:
      # Source code for hot reload
      - ../src:/app/src
      - ../tests:/app/tests
      - ../pyproject.toml:/app/pyproject.toml
      - ../uv.lock:/app/uv.lock
      
      # Development data
      - workspace_dev_data:/app/data
      - workspace_dev_logs:/app/logs
      - workspace_dev_tmp:/app/tmp
      
      # Configuration files
      - ./config:/app/config:ro
      
      # Workspace directory for testing
      - ${WORKSPACE_DIR:-./workspace}:/workspace
    networks:
      - workspace-dev-network
      - monitoring-dev
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/health\")' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.workspace-qdrant-mcp.service=main"
      - "com.workspace-qdrant-mcp.env=development"
    command: >
      bash -c "
        cd /app &&
        python -m uvicorn workspace_qdrant_mcp.server:app 
        --host 0.0.0.0 
        --port 8000 
        --reload 
        --reload-dir src 
        --log-level debug
      "

  # Qdrant vector database (development)
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: workspace-qdrant-qdrant-dev
    restart: unless-stopped
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=DEBUG
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      # Development-friendly settings
      - QDRANT__SERVICE__ENABLE_CORS=true
      - QDRANT__STORAGE__WAL_CAPACITY_MB=16
      - QDRANT__STORAGE__WAL_SEGMENTS_AHEAD=0
    volumes:
      - qdrant_dev_storage:/qdrant/storage
      - qdrant_dev_snapshots:/qdrant/snapshots
      - qdrant_dev_logs:/qdrant/logs
    networks:
      - workspace-dev-network
      - monitoring-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.workspace-qdrant-mcp.service=qdrant"
      - "com.workspace-qdrant-mcp.env=development"

  # Redis for development
  redis:
    image: redis:7.2-alpine
    container_name: workspace-qdrant-redis-dev
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync no
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --loglevel debug
    volumes:
      - redis_dev_data:/data
    networks:
      - workspace-dev-network
      - monitoring-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    labels:
      - "com.workspace-qdrant-mcp.service=redis"
      - "com.workspace-qdrant-mcp.env=development"

  # Development database viewer/manager
  qdrant-web-ui:
    image: qdrant/qdrant-web-ui:latest
    container_name: workspace-qdrant-web-ui
    restart: unless-stopped
    ports:
      - "${QDRANT_UI_PORT:-8080}:80"
    environment:
      - QDRANT_HOST=qdrant:6333
    networks:
      - workspace-dev-network
    depends_on:
      - qdrant
    labels:
      - "com.workspace-qdrant-mcp.service=web-ui"
      - "com.workspace-qdrant-mcp.env=development"

  # Redis insight for development
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: workspace-qdrant-redis-insight
    restart: unless-stopped
    ports:
      - "${REDIS_INSIGHT_PORT:-8001}:8001"
    volumes:
      - redis_insight_data:/db
    networks:
      - workspace-dev-network
    depends_on:
      - redis
    labels:
      - "com.workspace-qdrant-mcp.service=redis-insight"
      - "com.workspace-qdrant-mcp.env=development"

  # Testing service
  test-runner:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    image: workspace-qdrant-mcp:test
    container_name: workspace-qdrant-test-runner
    volumes:
      - ../src:/app/src
      - ../tests:/app/tests
      - ../pyproject.toml:/app/pyproject.toml
      - test_results:/app/test-results
      - test_coverage:/app/htmlcov
    networks:
      - workspace-dev-network
    depends_on:
      - workspace-qdrant-mcp
      - qdrant
      - redis
    environment:
      - PYTHONPATH=/app/src
      - QDRANT_HOST=qdrant
      - REDIS_HOST=redis
      - WORKSPACE_QDRANT_HOST=workspace-qdrant-mcp
      - TEST_ENV=docker
    labels:
      - "com.workspace-qdrant-mcp.service=testing"
      - "com.workspace-qdrant-mcp.env=development"
    profiles:
      - testing
    command: >
      bash -c "
        cd /app &&
        python -m pytest tests/ 
        -v 
        --cov=src/workspace_qdrant_mcp 
        --cov-report=html:/app/htmlcov
        --cov-report=term-missing 
        --junitxml=/app/test-results/junit.xml
        --cov-report=xml:/app/test-results/coverage.xml
      "

  # Documentation server
  docs:
    image: nginx:alpine
    container_name: workspace-qdrant-docs
    restart: unless-stopped
    ports:
      - "${DOCS_PORT:-8002}:80"
    volumes:
      - ../docs:/usr/share/nginx/html:ro
      - ./nginx/docs.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - workspace-dev-network
    labels:
      - "com.workspace-qdrant-mcp.service=docs"
      - "com.workspace-qdrant-mcp.env=development"
    profiles:
      - docs

  # Prometheus for development monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: workspace-qdrant-prometheus-dev
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--log.level=debug'
    networks:
      - monitoring-dev
    profiles:
      - monitoring
    labels:
      - "com.workspace-qdrant-mcp.service=prometheus"
      - "com.workspace-qdrant-mcp.env=development"

  # Grafana for development monitoring
  grafana:
    image: grafana/grafana:10.2.0
    container_name: workspace-qdrant-grafana-dev
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_LOG_LEVEL=debug
      - GF_FEATURE_TOGGLES_ENABLE=publicDashboards
    networks:
      - monitoring-dev
    depends_on:
      - prometheus
    profiles:
      - monitoring
    labels:
      - "com.workspace-qdrant-mcp.service=grafana"
      - "com.workspace-qdrant-mcp.env=development"

volumes:
  # Application data (development)
  workspace_dev_data:
    driver: local
  workspace_dev_logs:
    driver: local
  workspace_dev_tmp:
    driver: local
  
  # Database volumes (development)
  qdrant_dev_storage:
    driver: local
  qdrant_dev_snapshots:
    driver: local
  qdrant_dev_logs:
    driver: local
  redis_dev_data:
    driver: local
  
  # Development tools
  redis_insight_data:
    driver: local
  test_results:
    driver: local
  test_coverage:
    driver: local
  
  # Monitoring (development)
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local

networks:
  workspace-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16
          gateway: 172.31.0.1
  
  monitoring-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.32.0.0/16
          gateway: 172.32.0.1
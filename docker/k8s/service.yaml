# Services for exposing applications within the cluster
apiVersion: v1
kind: Service
metadata:
  name: workspace-qdrant-mcp-service
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: workspace-qdrant-mcp
    component: api
  sessionAffinity: None

---
# Qdrant service
apiVersion: v1
kind: Service
metadata:
  name: qdrant-service
  namespace: workspace-qdrant-mcp
  labels:
    app: qdrant
    component: database
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "6333"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 6333
    targetPort: http
    protocol: TCP
    name: http
  - port: 6334
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app: qdrant
    component: database
  sessionAffinity: None

---
# Redis service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: workspace-qdrant-mcp
  labels:
    app: redis
    component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: redis
    protocol: TCP
    name: redis
  selector:
    app: redis
    component: cache
  sessionAffinity: None

---
# Redis exporter service for monitoring
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter-service
  namespace: workspace-qdrant-mcp
  labels:
    app: redis
    component: exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 9121
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    app: redis
    component: cache

---
# Headless service for StatefulSet (if using StatefulSet for Qdrant cluster)
apiVersion: v1
kind: Service
metadata:
  name: qdrant-headless
  namespace: workspace-qdrant-mcp
  labels:
    app: qdrant
    component: database
spec:
  clusterIP: None
  ports:
  - port: 6333
    targetPort: http
    protocol: TCP
    name: http
  - port: 6334
    targetPort: grpc
    protocol: TCP
    name: grpc
  selector:
    app: qdrant
    component: database

---
# NodePort service for external access during development/testing
apiVersion: v1
kind: Service
metadata:
  name: workspace-qdrant-mcp-nodeport
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: api
    service-type: nodeport
  annotations:
    description: "NodePort service for external access during development"
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
    nodePort: 30800  # Optional: specify a specific NodePort
  selector:
    app: workspace-qdrant-mcp
    component: api

---
# LoadBalancer service (for cloud environments)
apiVersion: v1
kind: Service
metadata:
  name: workspace-qdrant-mcp-loadbalancer
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: api
    service-type: loadbalancer
  annotations:
    description: "LoadBalancer service for cloud environments"
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
    # Azure Load Balancer annotations
    service.beta.kubernetes.io/azure-load-balancer-health-probe-request-path: "/health"
    # GCP Load Balancer annotations
    cloud.google.com/backend-config: '{"ports": {"8000":"workspace-qdrant-mcp-backendconfig"}}'
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  - port: 443
    targetPort: http
    protocol: TCP
    name: https
  selector:
    app: workspace-qdrant-mcp
    component: api
  loadBalancerSourceRanges:
  - "0.0.0.0/0"  # Restrict this to specific IP ranges for security

---
# ExternalName service for external dependencies
apiVersion: v1
kind: Service
metadata:
  name: external-qdrant
  namespace: workspace-qdrant-mcp
  labels:
    app: qdrant
    component: external
spec:
  type: ExternalName
  externalName: your-external-qdrant.example.com
  ports:
  - port: 6333
    name: http
  - port: 6334
    name: grpc
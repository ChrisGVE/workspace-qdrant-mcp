# Secrets for sensitive configuration
# Note: Values are base64 encoded placeholders - replace with actual secrets
apiVersion: v1
kind: Secret
metadata:
  name: workspace-qdrant-mcp-secrets
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: secrets
type: Opaque
data:
  # Qdrant API key (base64 encoded)
  # Example: echo -n "your-qdrant-api-key" | base64
  QDRANT_API_KEY: "eW91ci1xZHJhbnQtYXBpLWtleQ=="
  
  # Redis password (base64 encoded)
  # Example: echo -n "your-redis-password" | base64
  REDIS_PASSWORD: "eW91ci1yZWRpcy1wYXNzd29yZA=="
  
  # Application secret key (base64 encoded)
  # Example: echo -n "your-app-secret-key" | base64
  APP_SECRET_KEY: "eW91ci1hcHAtc2VjcmV0LWtleQ=="
  
  # JWT secret (base64 encoded)
  # Example: echo -n "your-jwt-secret" | base64
  JWT_SECRET: "eW91ci1qd3Qtc2VjcmV0"

---
# TLS certificates for ingress
apiVersion: v1
kind: Secret
metadata:
  name: workspace-qdrant-mcp-tls
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: tls
type: kubernetes.io/tls
data:
  # TLS certificate (base64 encoded PEM)
  # Generate with: kubectl create secret tls workspace-qdrant-mcp-tls --cert=path/to/tls.crt --key=path/to/tls.key -n workspace-qdrant-mcp --dry-run=client -o yaml
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLiBZT1VSIENFUlRJRklDQVRFIENPTlRFTlQgSEVSRSAuLi4KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  
  # TLS private key (base64 encoded PEM)
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLiBZT1VSIFBSSVZBVEUgS0VZIENPTlRFTlQgSEVSRSAuLi4KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==

---
# Docker registry secret for private images
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker config JSON (base64 encoded)
  # Generate with: kubectl create secret docker-registry registry-secret --docker-server=your-registry.com --docker-username=your-username --docker-password=your-password --docker-email=your-email -n workspace-qdrant-mcp --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6eyJ5b3VyLXJlZ2lzdHJ5LmNvbSI6eyJ1c2VybmFtZSI6InlvdXItdXNlcm5hbWUiLCJwYXNzd29yZCI6InlvdXItcGFzc3dvcmQiLCJlbWFpbCI6InlvdXItZW1haWwiLCJhdXRoIjoiZVc5MWNpMTFjMlZ5Ym1GdFpUcDViM1Z5TFhCaGMzTjNiM0prIn19fQ==

---
# Monitoring credentials
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: workspace-qdrant-mcp
  labels:
    app: monitoring
    component: secrets
type: Opaque
data:
  # Grafana admin credentials (base64 encoded)
  GRAFANA_ADMIN_USER: "YWRtaW4="  # admin
  GRAFANA_ADMIN_PASSWORD: "WW91ckdyYWZhbmFQYXNzd29yZA=="  # YourGrafanaPassword
  
  # Prometheus basic auth (base64 encoded)
  PROMETHEUS_AUTH_USER: "cHJvbWV0aGV1cw=="  # prometheus
  PROMETHEUS_AUTH_PASSWORD: "WW91clByb21ldGhldXNQYXNzd29yZA=="  # YourPrometheusPassword

---
# Database backup credentials
apiVersion: v1
kind: Secret
metadata:
  name: backup-secrets
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: backup
type: Opaque
data:
  # S3 backup credentials (base64 encoded)
  AWS_ACCESS_KEY_ID: "WW91ckFXU0FjY2Vzc0tleUlk"  # YourAWSAccessKeyId
  AWS_SECRET_ACCESS_KEY: "WW91ckFXU1NlY3JldEFjY2Vzc0tleQ=="  # YourAWSSecretAccessKey
  
  # Backup encryption key (base64 encoded)
  BACKUP_ENCRYPTION_KEY: "WW91ckJhY2t1cEVuY3J5cHRpb25LZXk="  # YourBackupEncryptionKey
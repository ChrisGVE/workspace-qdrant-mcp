# Ingress configuration for external access with TLS termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: workspace-qdrant-mcp-ingress
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: ingress
  annotations:
    # Nginx ingress controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "10"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: "256k"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none';" always;
    
    # SSL configuration
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    
    # Cert-manager for automatic TLS certificates
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    
spec:
  tls:
  - hosts:
    - workspace-qdrant-mcp.example.com
    - api.workspace-qdrant-mcp.example.com
    secretName: workspace-qdrant-mcp-tls
  rules:
  - host: workspace-qdrant-mcp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: workspace-qdrant-mcp-service
            port:
              number: 8000
      - path: /health
        pathType: Exact
        backend:
          service:
            name: workspace-qdrant-mcp-service
            port:
              number: 8000
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: workspace-qdrant-mcp-service
            port:
              number: 8000
  - host: api.workspace-qdrant-mcp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: workspace-qdrant-mcp-service
            port:
              number: 8000

---
# Ingress for monitoring services (with authentication)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: workspace-qdrant-mcp
  labels:
    app: monitoring
    component: ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Basic authentication for monitoring endpoints
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Monitoring Access Required"
    
    # Rate limiting for admin access
    nginx.ingress.kubernetes.io/rate-limit: "20"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # SSL configuration
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    
    # Cert-manager
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  tls:
  - hosts:
    - grafana.workspace-qdrant-mcp.example.com
    - prometheus.workspace-qdrant-mcp.example.com
    - qdrant.workspace-qdrant-mcp.example.com
    secretName: monitoring-tls
  rules:
  - host: grafana.workspace-qdrant-mcp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
  - host: prometheus.workspace-qdrant-mcp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
  - host: qdrant.workspace-qdrant-mcp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: qdrant-service
            port:
              number: 6333

---
# AWS ALB Ingress (alternative for AWS environments)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: workspace-qdrant-mcp-alb
  namespace: workspace-qdrant-mcp
  labels:
    app: workspace-qdrant-mcp
    component: alb-ingress
  annotations:
    # AWS Load Balancer Controller annotations
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:region:account:certificate/cert-id"
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    
    # Health check
    alb.ingress.kubernetes.io/healthcheck-path: "/health"
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "15"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    
    # WAF
    alb.ingress.kubernetes.io/wafv2-acl-arn: "arn:aws:wafv2:region:account:regional/webacl/name/id"
    
    # Tags
    alb.ingress.kubernetes.io/tags: "Environment=production,Project=workspace-qdrant-mcp"
    
spec:
  rules:
  - host: workspace-qdrant-mcp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: workspace-qdrant-mcp-service
            port:
              number: 8000

---
# Basic authentication secret for monitoring
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: workspace-qdrant-mcp
  labels:
    app: monitoring
    component: auth
type: Opaque
data:
  # Generated with: htpasswd -c auth username
  # Example: admin:$2y$10$K8...
  auth: YWRtaW46JDJ5JDEwJEs4Li4u  # Replace with actual htpasswd output base64 encoded

---
# TLS certificate for monitoring ingress
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-tls
  namespace: workspace-qdrant-mcp
  labels:
    app: monitoring
    component: tls
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t  # Replace with actual certificate
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t  # Replace with actual private key
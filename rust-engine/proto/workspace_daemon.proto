syntax = "proto3";

package workspace_daemon;

// Import common types
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// =============================================================================
// SERVICE DEFINITIONS
// =============================================================================
// This protocol defines 3 services with 15 total RPCs for communication
// between the Rust daemon and Python components (MCP server, CLI).
//
// Design principles:
// - Single writer pattern: Only daemon writes to Qdrant
// - Queue-based async processing: File operations via SQLite queue
// - Direct sync ingestion: Text content via gRPC IngestText
// - Event-driven refresh: Lightweight signals for state changes
// =============================================================================

// -----------------------------------------------------------------------------
// 1. SystemService (7 RPCs)
// -----------------------------------------------------------------------------
// Purpose: System health monitoring, status reporting, refresh signaling,
//          and lifecycle management.

service SystemService {
    // Quick health check for monitoring/alerting
    rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);

    // Comprehensive system state snapshot
    rpc GetStatus(google.protobuf.Empty) returns (SystemStatusResponse);

    // Current performance metrics (no historical data)
    rpc GetMetrics(google.protobuf.Empty) returns (MetricsResponse);

    // Signal database state changes for event-driven refresh
    rpc SendRefreshSignal(RefreshSignalRequest) returns (google.protobuf.Empty);

    // MCP/CLI server lifecycle notifications
    rpc NotifyServerStatus(ServerStatusNotification) returns (google.protobuf.Empty);

    // Pause all file watchers (master switch)
    rpc PauseAllWatchers(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Resume all file watchers (master switch)
    rpc ResumeAllWatchers(google.protobuf.Empty) returns (google.protobuf.Empty);
}

// -----------------------------------------------------------------------------
// 2. CollectionService (5 RPCs)
// -----------------------------------------------------------------------------
// Purpose: Qdrant collection lifecycle and alias management.
// Note: ListCollections removed - MCP queries Qdrant directly.

service CollectionService {
    // Create collection with proper configuration
    rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);

    // Delete collection and all its data
    rpc DeleteCollection(DeleteCollectionRequest) returns (google.protobuf.Empty);

    // Create collection alias (for tenant_id changes)
    rpc CreateCollectionAlias(CreateAliasRequest) returns (google.protobuf.Empty);

    // Delete collection alias
    rpc DeleteCollectionAlias(DeleteAliasRequest) returns (google.protobuf.Empty);

    // Atomically rename alias (safer than delete + create)
    rpc RenameCollectionAlias(RenameAliasRequest) returns (google.protobuf.Empty);
}

// -----------------------------------------------------------------------------
// 3. DocumentService (3 RPCs)
// -----------------------------------------------------------------------------
// Purpose: Direct text ingestion (not file-based).
// Use case: Content not from files - user input, chat snippets, scraped web
//           content, manual notes.

service DocumentService {
    // Ingest text content directly (synchronous)
    rpc IngestText(IngestTextRequest) returns (IngestTextResponse);

    // Update previously ingested text
    rpc UpdateText(UpdateTextRequest) returns (UpdateTextResponse);

    // Delete ingested text document
    rpc DeleteText(DeleteTextRequest) returns (google.protobuf.Empty);
}

// =============================================================================
// MESSAGE TYPES - SystemService
// =============================================================================

// HealthCheck Response
message HealthCheckResponse {
    ServiceStatus status = 1;                     // Overall health
    repeated ComponentHealth components = 2;      // Per-component status
    google.protobuf.Timestamp timestamp = 3;      // Check timestamp
}

message ComponentHealth {
    string component_name = 1;                    // e.g., "queue_processor", "file_watcher"
    ServiceStatus status = 2;
    string message = 3;                           // Human-readable status
    google.protobuf.Timestamp last_check = 4;
}

// GetStatus Response
message SystemStatusResponse {
    ServiceStatus status = 1;
    SystemMetrics metrics = 2;                    // CPU, memory, disk
    repeated string active_projects = 3;          // Currently watched projects
    int32 total_documents = 4;                    // Documents in Qdrant
    int32 total_collections = 5;                  // Collections in Qdrant
    google.protobuf.Timestamp uptime_since = 6;   // Daemon start time
}

message SystemMetrics {
    double cpu_usage_percent = 1;
    int64 memory_usage_bytes = 2;
    int64 memory_total_bytes = 3;
    int64 disk_usage_bytes = 4;
    int64 disk_total_bytes = 5;
    int32 active_connections = 6;                 // Active gRPC connections
    int32 pending_operations = 7;                 // Queue depth
}

// GetMetrics Response
message MetricsResponse {
    repeated Metric metrics = 1;
    google.protobuf.Timestamp collected_at = 2;
}

message Metric {
    string name = 1;                              // e.g., "queue_throughput"
    string type = 2;                              // "counter", "gauge", "histogram"
    map<string, string> labels = 3;               // Metric dimensions
    double value = 4;
    google.protobuf.Timestamp timestamp = 5;
}

// SendRefreshSignal Request
message RefreshSignalRequest {
    QueueType queue_type = 1;
    repeated string lsp_languages = 2;            // For TOOLS_AVAILABLE signal
    repeated string grammar_languages = 3;        // For TOOLS_AVAILABLE signal
}

// NotifyServerStatus Request
message ServerStatusNotification {
    ServerState state = 1;                        // UP or DOWN
    optional string project_name = 2;             // Git repo name or folder name
    optional string project_root = 3;             // Absolute path to project root
}

// =============================================================================
// MESSAGE TYPES - CollectionService
// =============================================================================

// CreateCollection Request/Response
message CreateCollectionRequest {
    string collection_name = 1;
    string project_id = 2;                        // Optional project association
    CollectionConfig config = 3;                  // Vector configuration
}

message CreateCollectionResponse {
    bool success = 1;
    string error_message = 2;
    string collection_id = 3;                     // Qdrant's internal ID
}

message CollectionConfig {
    int32 vector_size = 1;                        // Must match embedding model (e.g., 384)
    string distance_metric = 2;                   // "Cosine", "Euclidean", "Dot"
    bool enable_indexing = 3;                     // HNSW index activation
    map<string, string> metadata_schema = 4;      // Expected metadata fields
}

// DeleteCollection Request
message DeleteCollectionRequest {
    string collection_name = 1;
    string project_id = 2;                        // For validation
    bool force = 3;                               // Skip confirmation checks
}

// CreateCollectionAlias Request
message CreateAliasRequest {
    string alias_name = 1;                        // The new name
    string collection_name = 2;                   // Points to this collection
}

// DeleteCollectionAlias Request
message DeleteAliasRequest {
    string alias_name = 1;
}

// RenameCollectionAlias Request
message RenameAliasRequest {
    string old_alias_name = 1;
    string new_alias_name = 2;
    string collection_name = 3;                   // The collection it points to
}

// =============================================================================
// MESSAGE TYPES - DocumentService
// =============================================================================

// IngestText Request/Response
message IngestTextRequest {
    string content = 1;                           // The text to ingest
    string collection_basename = 2;               // e.g., "memory", "scratchbook"
    string tenant_id = 3;                         // Multi-tenant identifier
    optional string document_id = 4;              // Custom ID (generated if omitted)
    map<string, string> metadata = 5;             // Additional metadata
    bool chunk_text = 6;                          // Whether to chunk (default: true)
}

message IngestTextResponse {
    string document_id = 1;                       // For future updates/deletes
    bool success = 2;
    int32 chunks_created = 3;                     // Number of chunks generated
    string error_message = 4;
}

// UpdateText Request/Response
message UpdateTextRequest {
    string document_id = 1;                       // From IngestTextResponse
    string content = 2;                           // New content
    optional string collection_name = 3;          // If moving to different collection
    map<string, string> metadata = 4;             // Updated metadata
}

message UpdateTextResponse {
    bool success = 1;
    string error_message = 2;
    google.protobuf.Timestamp updated_at = 3;
}

// DeleteText Request
message DeleteTextRequest {
    string document_id = 1;
    string collection_name = 2;                   // For validation
}

// =============================================================================
// COMMON ENUMS
// =============================================================================

enum ServiceStatus {
    SERVICE_STATUS_UNSPECIFIED = 0;
    SERVICE_STATUS_HEALTHY = 1;
    SERVICE_STATUS_DEGRADED = 2;
    SERVICE_STATUS_UNHEALTHY = 3;
    SERVICE_STATUS_UNAVAILABLE = 4;
}

enum QueueType {
    QUEUE_TYPE_UNSPECIFIED = 0;
    INGEST_QUEUE = 1;           // New items in ingestion_queue table
    WATCHED_PROJECTS = 2;        // New project in projects table
    WATCHED_FOLDERS = 3;         // New watch in watch_folders table
    TOOLS_AVAILABLE = 4;         // LSP/tree-sitter became available
}

enum ServerState {
    SERVER_STATE_UNSPECIFIED = 0;
    SERVER_STATE_UP = 1;                          // Server started
    SERVER_STATE_DOWN = 2;                        // Server shutting down
}

enum DocumentType {
    DOCUMENT_TYPE_UNSPECIFIED = 0;
    DOCUMENT_TYPE_CODE = 1;
    DOCUMENT_TYPE_PDF = 2;
    DOCUMENT_TYPE_EPUB = 3;
    DOCUMENT_TYPE_MOBI = 4;
    DOCUMENT_TYPE_HTML = 5;
    DOCUMENT_TYPE_TEXT = 6;
    DOCUMENT_TYPE_MARKDOWN = 7;
    DOCUMENT_TYPE_JSON = 8;
    DOCUMENT_TYPE_XML = 9;
}

enum ProcessingStatus {
    PROCESSING_STATUS_UNSPECIFIED = 0;
    PROCESSING_STATUS_PENDING = 1;
    PROCESSING_STATUS_IN_PROGRESS = 2;
    PROCESSING_STATUS_COMPLETED = 3;
    PROCESSING_STATUS_FAILED = 4;
    PROCESSING_STATUS_CANCELLED = 5;
}
